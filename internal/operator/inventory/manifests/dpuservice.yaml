apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: dpf-dpuservice
    app.kubernetes.io/instance: system
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: namespace
    app.kubernetes.io/part-of: dpf-dpuservice
    control-plane: controller-manager
  name: dpuservice-controller-system
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  name: dpuservices.svc.dpf.nvidia.com
spec:
  group: svc.dpf.nvidia.com
  names:
    kind: DPUService
    listKind: DPUServiceList
    plural: dpuservices
    singular: dpuservice
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: DPUService is the Schema for the dpuservices API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: DPUServiceSpec defines the desired state of DPUService
            properties:
              serviceDaemonSet:
                properties:
                  annotations:
                    additionalProperties:
                      type: string
                    description: Annotations specifies annotations which are added
                      to the ServiceDaemonSet.
                    type: object
                  labels:
                    additionalProperties:
                      type: string
                    description: Labels specifies labels which are added to the ServiceDaemonSet.
                    type: object
                  nodeSelector:
                    description: NodeSelector specifies which Nodes to deploy the
                      ServiceDaemonSet to.
                    properties:
                      nodeSelectorTerms:
                        description: Required. A list of node selector terms. The
                          terms are ORed.
                        items:
                          description: |-
                            A null or empty node selector term matches no objects. The requirements of
                            them are ANDed.
                            The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
                          properties:
                            matchExpressions:
                              description: A list of node selector requirements by
                                node's labels.
                              items:
                                description: |-
                                  A node selector requirement is a selector that contains values, a key, and an operator
                                  that relates the key and values.
                                properties:
                                  key:
                                    description: The label key that the selector applies
                                      to.
                                    type: string
                                  operator:
                                    description: |-
                                      Represents a key's relationship to a set of values.
                                      Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                    type: string
                                  values:
                                    description: |-
                                      An array of string values. If the operator is In or NotIn,
                                      the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                      the values array must be empty. If the operator is Gt or Lt, the values
                                      array must have a single element, which will be interpreted as an integer.
                                      This array is replaced during a strategic merge patch.
                                    items:
                                      type: string
                                    type: array
                                required:
                                - key
                                - operator
                                type: object
                              type: array
                            matchFields:
                              description: A list of node selector requirements by
                                node's fields.
                              items:
                                description: |-
                                  A node selector requirement is a selector that contains values, a key, and an operator
                                  that relates the key and values.
                                properties:
                                  key:
                                    description: The label key that the selector applies
                                      to.
                                    type: string
                                  operator:
                                    description: |-
                                      Represents a key's relationship to a set of values.
                                      Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                    type: string
                                  values:
                                    description: |-
                                      An array of string values. If the operator is In or NotIn,
                                      the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                      the values array must be empty. If the operator is Gt or Lt, the values
                                      array must have a single element, which will be interpreted as an integer.
                                      This array is replaced during a strategic merge patch.
                                    items:
                                      type: string
                                    type: array
                                required:
                                - key
                                - operator
                                type: object
                              type: array
                          type: object
                          x-kubernetes-map-type: atomic
                        type: array
                    required:
                    - nodeSelectorTerms
                    type: object
                    x-kubernetes-map-type: atomic
                  resources:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: Resources specifies the resource limits and requests
                      for the ServiceDaemonSet.
                    type: object
                  updateStrategy:
                    description: UpdateStrategy specifies the DeaemonSet update strategy
                      for the ServiceDaemonset.
                    properties:
                      rollingUpdate:
                        description: |-
                          Rolling update config params. Present only if type = "RollingUpdate".
                          ---
                          TODO: Update this to follow our convention for oneOf, whatever we decide it
                          to be. Same as Deployment `strategy.rollingUpdate`.
                          See https://github.com/kubernetes/kubernetes/issues/35345
                        properties:
                          maxSurge:
                            anyOf:
                            - type: integer
                            - type: string
                            description: |-
                              The maximum number of nodes with an existing available DaemonSet pod that
                              can have an updated DaemonSet pod during during an update.
                              Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
                              This can not be 0 if MaxUnavailable is 0.
                              Absolute number is calculated from percentage by rounding up to a minimum of 1.
                              Default value is 0.
                              Example: when this is set to 30%, at most 30% of the total number of nodes
                              that should be running the daemon pod (i.e. status.desiredNumberScheduled)
                              can have their a new pod created before the old pod is marked as deleted.
                              The update starts by launching new pods on 30% of nodes. Once an updated
                              pod is available (Ready for at least minReadySeconds) the old DaemonSet pod
                              on that node is marked deleted. If the old pod becomes unavailable for any
                              reason (Ready transitions to false, is evicted, or is drained) an updated
                              pod is immediatedly created on that node without considering surge limits.
                              Allowing surge implies the possibility that the resources consumed by the
                              daemonset on any given node can double if the readiness check fails, and
                              so resource intensive daemonsets should take into account that they may
                              cause evictions during disruption.
                            x-kubernetes-int-or-string: true
                          maxUnavailable:
                            anyOf:
                            - type: integer
                            - type: string
                            description: |-
                              The maximum number of DaemonSet pods that can be unavailable during the
                              update. Value can be an absolute number (ex: 5) or a percentage of total
                              number of DaemonSet pods at the start of the update (ex: 10%). Absolute
                              number is calculated from percentage by rounding up.
                              This cannot be 0 if MaxSurge is 0
                              Default value is 1.
                              Example: when this is set to 30%, at most 30% of the total number of nodes
                              that should be running the daemon pod (i.e. status.desiredNumberScheduled)
                              can have their pods stopped for an update at any given time. The update
                              starts by stopping at most 30% of those DaemonSet pods and then brings
                              up new DaemonSet pods in their place. Once the new pods are available,
                              it then proceeds onto other DaemonSet pods, thus ensuring that at least
                              70% of original number of DaemonSet pods are available at all times during
                              the update.
                            x-kubernetes-int-or-string: true
                        type: object
                      type:
                        description: Type of daemon set update. Can be "RollingUpdate"
                          or "OnDelete". Default is RollingUpdate.
                        type: string
                    type: object
                type: object
              serviceID:
                type: string
              source:
                properties:
                  chart:
                    description: Chart is the name of the helm chart.
                    type: string
                  path:
                    description: Path is the location of the chart inside the repo.
                    type: string
                  releaseName:
                    description: ReleaseName is the name to give to the release generate
                      from the DPUService.
                    type: string
                  repoURL:
                    description: |-
                      TODO: This currently allows deploying a helm chart either from a helm repo. This should be validated as such.
                      RepoURL is the URL to the repository that contains the application helm chart.
                    type: string
                  version:
                    description: Version is a semver tag for the Chart's version.
                    type: string
                required:
                - repoURL
                - version
                type: object
              values:
                description: Values specifies Helm values to be passed to helm template,
                  defined as a map. This takes precedence over Values.
                type: object
                x-kubernetes-preserve-unknown-fields: true
            required:
            - source
            type: object
          status:
            description: DPUServiceStatus defines the observed state of DPUService
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: dpf-operator
    app.kubernetes.io/instance: controller-manager-sa
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: dpf-operator
  name: dpuservice-controller-manager
  namespace: dpuservice-controller-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: dpf-operator
    app.kubernetes.io/instance: leader-election-role
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: role
    app.kubernetes.io/part-of: dpf-operator
  name: dpuservice-leader-election-role
  namespace: dpuservice-controller-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dpuservice-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - events
  - persistentvolumeclaims
  - secrets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - argoproj.io
  resources:
  - applications
  - appprojects
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - kamaji.clastix.io
  resources:
  - tenantcontrolplanes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - svc.dpf.nvidia.com
  resources:
  - dpuservices
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - svc.dpf.nvidia.com
  resources:
  - dpuservices/finalizers
  verbs:
  - update
- apiGroups:
  - svc.dpf.nvidia.com
  resources:
  - dpuservices/status
  verbs:
  - get
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: dpf-operator
    app.kubernetes.io/instance: leader-election-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: rolebinding
    app.kubernetes.io/part-of: dpf-operator
  name: dpuservice-leader-election-rolebinding
  namespace: dpuservice-controller-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: dpuservice-leader-election-role
subjects:
- kind: ServiceAccount
  name: dpuservice-controller-manager
  namespace: dpuservice-controller-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: dpf-operator
    app.kubernetes.io/instance: manager-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: dpf-operator
  name: dpuservice-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dpuservice-manager-role
subjects:
- kind: ServiceAccount
  name: dpuservice-controller-manager
  namespace: dpuservice-controller-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: dpf-dpuservice
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: deployment
    app.kubernetes.io/part-of: dpf-dpuservice
    control-plane: controller-manager
  name: dpuservice-controller-manager
  namespace: dpuservice-controller-system
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
    spec:
      containers:
      - command:
        - /manager
        image: nvidia.com/dpuservice-controller-manager:dev
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      serviceAccountName: dpuservice-controller-manager
      terminationGracePeriodSeconds: 10
