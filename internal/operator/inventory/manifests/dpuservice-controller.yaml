apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: dpf-dpuservice
    app.kubernetes.io/instance: system
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: namespace
    app.kubernetes.io/part-of: dpf-dpuservice
    control-plane: controller-manager
    dpf.nvidia.com/component: dpuservice-controller-manager
  name: dpuservice-controller-system
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  labels:
    dpf.nvidia.com/component: dpuservice-controller-manager
  name: dpudeployments.svc.dpf.nvidia.com
spec:
  group: svc.dpf.nvidia.com
  names:
    kind: DPUDeployment
    listKind: DPUDeploymentList
    plural: dpudeployments
    singular: dpudeployment
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: |-
          DPUDeployment is the Schema for the dpudeployments API. This object connects DPUServices with specific BFBs and
          DPUServiceChains.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: DPUDeploymentSpec defines the desired state of DPUDeployment
            properties:
              dpus:
                description: DPUs contains the DPU related configuration
                properties:
                  bfb:
                    description: |-
                      BFB is the name of the BFB object to be used in this DPUDeployment. It must be in the same namespace as the
                      DPUDeployment.
                    type: string
                  dpuSets:
                    description: DPUSets contains configuration for each DPUSet that
                      is going to be created by the DPUDeployment
                    items:
                      description: DPUSet contains configuration for the DPUSet to
                        be created by the DPUDeployment
                      properties:
                        dpuAnnotations:
                          additionalProperties:
                            type: string
                          description: DPUAnnotations is the annotations to be added
                            to the DPU object created by the DPUSet.
                          type: object
                        dpuSelector:
                          additionalProperties:
                            type: string
                          description: |-
                            DPUSelector defines the DPUs that the DPUSet should target
                            TODO: Revisit if this one is needed at all or we can use the nodeSelector directly. If it's not the case, drop
                            this field and the field in the DPUSet. Based on the current implementation, it looks like we could remove it.
                          type: object
                        nodeSelector:
                          description: NodeSelector defines the nodes that the DPUSet
                            should target
                          properties:
                            matchExpressions:
                              description: matchExpressions is a list of label selector
                                requirements. The requirements are ANDed.
                              items:
                                description: |-
                                  A label selector requirement is a selector that contains values, a key, and an operator that
                                  relates the key and values.
                                properties:
                                  key:
                                    description: key is the label key that the selector
                                      applies to.
                                    type: string
                                  operator:
                                    description: |-
                                      operator represents a key's relationship to a set of values.
                                      Valid operators are In, NotIn, Exists and DoesNotExist.
                                    type: string
                                  values:
                                    description: |-
                                      values is an array of string values. If the operator is In or NotIn,
                                      the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                      the values array must be empty. This array is replaced during a strategic
                                      merge patch.
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                required:
                                - key
                                - operator
                                type: object
                              type: array
                              x-kubernetes-list-type: atomic
                            matchLabels:
                              additionalProperties:
                                type: string
                              description: |-
                                matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                                map is equivalent to an element of matchExpressions, whose key field is "key", the
                                operator is "In", and the values array contains only "value". The requirements are ANDed.
                              type: object
                          type: object
                          x-kubernetes-map-type: atomic
                      type: object
                    type: array
                  flavor:
                    description: |-
                      Flavor is the name of the DPUFlavor object to be used in this DPUDeployment. It must be in the same namespace as
                      the DPUDeployment.
                    type: string
                required:
                - bfb
                - flavor
                type: object
              serviceChains:
                description: ServiceChains contains the configuration related to the
                  DPUServiceChains that the DPUDeployment creates.
                items:
                  description: Switch defines the switch configuration
                  properties:
                    ports:
                      description: Ports of the switch
                      items:
                        description: Port defines the port configuration
                        properties:
                          service:
                            properties:
                              interface:
                                description: Interface name
                                type: string
                              ipam:
                                description: IPAM defines the IPAM configuration
                                properties:
                                  defaultGateway:
                                    type: boolean
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    maxProperties: 50
                                    minProperties: 1
                                    type: object
                                  reference:
                                    properties:
                                      name:
                                        description: Name of the object
                                        maxLength: 253
                                        minLength: 1
                                        type: string
                                      namespace:
                                        description: Namespace of the object
                                        maxLength: 253
                                        minLength: 1
                                        type: string
                                    required:
                                    - name
                                    type: object
                                  setDefaultRoute:
                                    type: boolean
                                type: object
                                x-kubernetes-validations:
                                - message: either reference or matchLabels must be
                                    specified
                                  rule: (has(self.reference) && !has(self.matchLabels))
                                    || (!has(self.reference) && has(self.matchLabels))
                              matchLabels:
                                additionalProperties:
                                  type: string
                                description: |-
                                  MatchLabels is a map of string keys and values that are used to select
                                  an object.
                                maxProperties: 50
                                minProperties: 1
                                type: object
                              reference:
                                description: 'TODO: What is this field supposed to
                                  be?'
                                properties:
                                  name:
                                    description: Name of the object
                                    maxLength: 253
                                    minLength: 1
                                    type: string
                                  namespace:
                                    description: Namespace of the object
                                    maxLength: 253
                                    minLength: 1
                                    type: string
                                required:
                                - name
                                type: object
                            required:
                            - interface
                            type: object
                            x-kubernetes-validations:
                            - message: either reference or matchLabels must be specified
                              rule: (has(self.reference) && !has(self.matchLabels))
                                || (!has(self.reference) && has(self.matchLabels))
                          serviceInterface:
                            description: ServiceIfc defines the service interface
                              configuration
                            properties:
                              matchLabels:
                                additionalProperties:
                                  type: string
                                maxProperties: 50
                                minProperties: 1
                                type: object
                              reference:
                                description: 'TODO: What is this field supposed to
                                  be?'
                                properties:
                                  name:
                                    description: Name of the object
                                    maxLength: 253
                                    minLength: 1
                                    type: string
                                  namespace:
                                    description: Namespace of the object
                                    maxLength: 253
                                    minLength: 1
                                    type: string
                                required:
                                - name
                                type: object
                            type: object
                            x-kubernetes-validations:
                            - message: either reference or matchLabels must be specified
                              rule: (has(self.reference) && !has(self.matchLabels))
                                || (!has(self.reference) && has(self.matchLabels))
                        type: object
                        x-kubernetes-validations:
                        - message: either service or serviceInterface must be specified
                          rule: (has(self.service) && !has(self.serviceInterface))
                            || (!has(self.service) && has(self.serviceInterface))
                      maxItems: 50
                      minItems: 1
                      type: array
                  required:
                  - ports
                  type: object
                maxItems: 50
                minItems: 1
                type: array
              services:
                additionalProperties:
                  description: DPUDeploymentServiceConfiguration describes the configuration
                    of a particular Service
                  properties:
                    serviceConfiguration:
                      description: |-
                        ServiceConfiguration is the name of the DPUServiceConfiguration object to be used for this Service. It must be
                        in the same namespace as the DPUDeployment.
                      type: string
                    serviceTemplate:
                      description: |-
                        ServiceTemplate is the name of the DPUServiceTemplate object to be used for this Service. It must be in the same
                        namespace as the DPUDeployment.
                      type: string
                  required:
                  - serviceConfiguration
                  - serviceTemplate
                  type: object
                description: |-
                  Services contains the Service related configuration. The key is the service ID and the value is its
                  configuration. All underlying objects must specify the same service ID in order to be able to be consumed by the
                  DPUDeployment.
                type: object
              strategy:
                description: |-
                  Strategy contains configuration related to the rolling update that the DPUDeployment can do whenever a DPUService
                  or a DPUSet related setting has changed.
                properties:
                  rollingUpdate:
                    description: RollingUpdate specifies the parameters related to
                      the rolling update
                    properties:
                      maxSurge:
                        anyOf:
                        - type: integer
                        - type: string
                        description: |-
                          The maximum number of nodes with an existing available DaemonSet pod that
                          can have an updated DaemonSet pod during during an update.
                          Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
                          This can not be 0 if MaxUnavailable is 0.
                          Absolute number is calculated from percentage by rounding up to a minimum of 1.
                          Default value is 0.
                          Example: when this is set to 30%, at most 30% of the total number of nodes
                          that should be running the daemon pod (i.e. status.desiredNumberScheduled)
                          can have their a new pod created before the old pod is marked as deleted.
                          The update starts by launching new pods on 30% of nodes. Once an updated
                          pod is available (Ready for at least minReadySeconds) the old DaemonSet pod
                          on that node is marked deleted. If the old pod becomes unavailable for any
                          reason (Ready transitions to false, is evicted, or is drained) an updated
                          pod is immediatedly created on that node without considering surge limits.
                          Allowing surge implies the possibility that the resources consumed by the
                          daemonset on any given node can double if the readiness check fails, and
                          so resource intensive daemonsets should take into account that they may
                          cause evictions during disruption.
                        x-kubernetes-int-or-string: true
                      maxUnavailable:
                        anyOf:
                        - type: integer
                        - type: string
                        description: |-
                          The maximum number of DaemonSet pods that can be unavailable during the
                          update. Value can be an absolute number (ex: 5) or a percentage of total
                          number of DaemonSet pods at the start of the update (ex: 10%). Absolute
                          number is calculated from percentage by rounding up.
                          This cannot be 0 if MaxSurge is 0
                          Default value is 1.
                          Example: when this is set to 30%, at most 30% of the total number of nodes
                          that should be running the daemon pod (i.e. status.desiredNumberScheduled)
                          can have their pods stopped for an update at any given time. The update
                          starts by stopping at most 30% of those DaemonSet pods and then brings
                          up new DaemonSet pods in their place. Once the new pods are available,
                          it then proceeds onto other DaemonSet pods, thus ensuring that at least
                          70% of original number of DaemonSet pods are available at all times during
                          the update.
                        x-kubernetes-int-or-string: true
                    type: object
                required:
                - rollingUpdate
                type: object
            required:
            - dpus
            - serviceChains
            - services
            type: object
          status:
            description: DPUDeploymentStatus defines the observed state of DPUDeployment
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  labels:
    dpf.nvidia.com/component: dpuservice-controller-manager
  name: dpuserviceconfigurations.svc.dpf.nvidia.com
spec:
  group: svc.dpf.nvidia.com
  names:
    kind: DPUServiceConfiguration
    listKind: DPUServiceConfigurationList
    plural: dpuserviceconfigurations
    singular: dpuserviceconfiguration
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: |-
          DPUServiceConfiguration is the Schema for the dpuserviceconfigurations API. This object is intended to be used in
          conjunction with a DPUDeployment object. This object is the template from which the DPUService will be created. It
          contains all configuration options from the user to be provided to the service itself via the helm chart values.
          This object doesn't allow configuration of nodeSelector and resources in purpose as these are delegated to the
          DPUDeployment and DPUServiceTemplate accordingly.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: DPUServiceConfigurationSpec defines the desired state of
              DPUServiceConfiguration
            properties:
              service:
                description: |-
                  Service is the name of the DPU service this configuration refers to. It must match .spec.service of a
                  DPUServiceTemplate object and one of the keys in .spec.services of a DPUDeployment object.
                type: string
              serviceConfiguration:
                description: ServiceConfiguration contains fields that are configured
                  on the generated DPUService.
                properties:
                  deployInCluster:
                    description: |-
                      TODO: Add nodeEffect
                      DeployInCluster indicates if the DPUService Helm Chart will be deployed on the Host cluster. Default to false.
                    type: boolean
                  helmChart:
                    description: HelmChart reflects the Helm related configuration
                    properties:
                      source:
                        description: Source specifies information about the Helm chart
                        properties:
                          chart:
                            description: Chart is the name of the helm chart.
                            type: string
                          path:
                            description: Path is the location of the chart inside
                              the repo.
                            type: string
                          releaseName:
                            description: ReleaseName is the name to give to the release
                              generate from the DPUService.
                            type: string
                          repoURL:
                            description: |-
                              TODO: This currently allows deploying a helm chart either from a helm repo. This should be validated as such.
                              RepoURL is the URL to the repository that contains the application helm chart.
                            type: string
                          version:
                            description: Version is a semver tag for the Chart's version.
                            type: string
                        required:
                        - repoURL
                        - version
                        type: object
                      values:
                        description: Values specifies Helm values to be passed to
                          Helm template, defined as a map. This takes precedence over
                          Values.
                        type: object
                        x-kubernetes-preserve-unknown-fields: true
                    required:
                    - source
                    type: object
                  serviceDaemonSet:
                    description: ServiceDaemonSet contains settings related to the
                      underlying DaemonSet that is part of the Helm chart
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: Annotations specifies annotations which are added
                          to the ServiceDaemonSet.
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: Labels specifies labels which are added to the
                          ServiceDaemonSet.
                        type: object
                      updateStrategy:
                        description: UpdateStrategy specifies the DeaemonSet update
                          strategy for the ServiceDaemonset.
                        properties:
                          rollingUpdate:
                            description: |-
                              Rolling update config params. Present only if type = "RollingUpdate".
                              ---
                              TODO: Update this to follow our convention for oneOf, whatever we decide it
                              to be. Same as Deployment `strategy.rollingUpdate`.
                              See https://github.com/kubernetes/kubernetes/issues/35345
                            properties:
                              maxSurge:
                                anyOf:
                                - type: integer
                                - type: string
                                description: |-
                                  The maximum number of nodes with an existing available DaemonSet pod that
                                  can have an updated DaemonSet pod during during an update.
                                  Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
                                  This can not be 0 if MaxUnavailable is 0.
                                  Absolute number is calculated from percentage by rounding up to a minimum of 1.
                                  Default value is 0.
                                  Example: when this is set to 30%, at most 30% of the total number of nodes
                                  that should be running the daemon pod (i.e. status.desiredNumberScheduled)
                                  can have their a new pod created before the old pod is marked as deleted.
                                  The update starts by launching new pods on 30% of nodes. Once an updated
                                  pod is available (Ready for at least minReadySeconds) the old DaemonSet pod
                                  on that node is marked deleted. If the old pod becomes unavailable for any
                                  reason (Ready transitions to false, is evicted, or is drained) an updated
                                  pod is immediatedly created on that node without considering surge limits.
                                  Allowing surge implies the possibility that the resources consumed by the
                                  daemonset on any given node can double if the readiness check fails, and
                                  so resource intensive daemonsets should take into account that they may
                                  cause evictions during disruption.
                                x-kubernetes-int-or-string: true
                              maxUnavailable:
                                anyOf:
                                - type: integer
                                - type: string
                                description: |-
                                  The maximum number of DaemonSet pods that can be unavailable during the
                                  update. Value can be an absolute number (ex: 5) or a percentage of total
                                  number of DaemonSet pods at the start of the update (ex: 10%). Absolute
                                  number is calculated from percentage by rounding up.
                                  This cannot be 0 if MaxSurge is 0
                                  Default value is 1.
                                  Example: when this is set to 30%, at most 30% of the total number of nodes
                                  that should be running the daemon pod (i.e. status.desiredNumberScheduled)
                                  can have their pods stopped for an update at any given time. The update
                                  starts by stopping at most 30% of those DaemonSet pods and then brings
                                  up new DaemonSet pods in their place. Once the new pods are available,
                                  it then proceeds onto other DaemonSet pods, thus ensuring that at least
                                  70% of original number of DaemonSet pods are available at all times during
                                  the update.
                                x-kubernetes-int-or-string: true
                            type: object
                          type:
                            description: Type of daemon set update. Can be "RollingUpdate"
                              or "OnDelete". Default is RollingUpdate.
                            type: string
                        type: object
                    type: object
                required:
                - helmChart
                type: object
            required:
            - service
            - serviceConfiguration
            type: object
          status:
            description: DPUServiceConfigurationStatus defines the observed state
              of DPUServiceConfiguration
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  labels:
    dpf.nvidia.com/component: dpuservice-controller-manager
  name: dpuservices.svc.dpf.nvidia.com
spec:
  group: svc.dpf.nvidia.com
  names:
    kind: DPUService
    listKind: DPUServiceList
    plural: dpuservices
    singular: dpuservice
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: DPUService is the Schema for the dpuservices API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: DPUServiceSpec defines the desired state of DPUService
            properties:
              deployInCluster:
                description: DeployInCluster indicates if the DPUService Helm Chart
                  will be deployed on the Host cluster. Default to false.
                type: boolean
              helmChart:
                description: HelmChart reflects the Helm related configuration
                properties:
                  source:
                    description: Source specifies information about the Helm chart
                    properties:
                      chart:
                        description: Chart is the name of the helm chart.
                        type: string
                      path:
                        description: Path is the location of the chart inside the
                          repo.
                        type: string
                      releaseName:
                        description: ReleaseName is the name to give to the release
                          generate from the DPUService.
                        type: string
                      repoURL:
                        description: |-
                          TODO: This currently allows deploying a helm chart either from a helm repo. This should be validated as such.
                          RepoURL is the URL to the repository that contains the application helm chart.
                        type: string
                      version:
                        description: Version is a semver tag for the Chart's version.
                        type: string
                    required:
                    - repoURL
                    - version
                    type: object
                  values:
                    description: Values specifies Helm values to be passed to Helm
                      template, defined as a map. This takes precedence over Values.
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                required:
                - source
                type: object
              serviceDaemonSet:
                properties:
                  annotations:
                    additionalProperties:
                      type: string
                    description: Annotations specifies annotations which are added
                      to the ServiceDaemonSet.
                    type: object
                  labels:
                    additionalProperties:
                      type: string
                    description: Labels specifies labels which are added to the ServiceDaemonSet.
                    type: object
                  nodeSelector:
                    description: NodeSelector specifies which Nodes to deploy the
                      ServiceDaemonSet to.
                    properties:
                      nodeSelectorTerms:
                        description: Required. A list of node selector terms. The
                          terms are ORed.
                        items:
                          description: |-
                            A null or empty node selector term matches no objects. The requirements of
                            them are ANDed.
                            The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
                          properties:
                            matchExpressions:
                              description: A list of node selector requirements by
                                node's labels.
                              items:
                                description: |-
                                  A node selector requirement is a selector that contains values, a key, and an operator
                                  that relates the key and values.
                                properties:
                                  key:
                                    description: The label key that the selector applies
                                      to.
                                    type: string
                                  operator:
                                    description: |-
                                      Represents a key's relationship to a set of values.
                                      Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                    type: string
                                  values:
                                    description: |-
                                      An array of string values. If the operator is In or NotIn,
                                      the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                      the values array must be empty. If the operator is Gt or Lt, the values
                                      array must have a single element, which will be interpreted as an integer.
                                      This array is replaced during a strategic merge patch.
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                required:
                                - key
                                - operator
                                type: object
                              type: array
                              x-kubernetes-list-type: atomic
                            matchFields:
                              description: A list of node selector requirements by
                                node's fields.
                              items:
                                description: |-
                                  A node selector requirement is a selector that contains values, a key, and an operator
                                  that relates the key and values.
                                properties:
                                  key:
                                    description: The label key that the selector applies
                                      to.
                                    type: string
                                  operator:
                                    description: |-
                                      Represents a key's relationship to a set of values.
                                      Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                    type: string
                                  values:
                                    description: |-
                                      An array of string values. If the operator is In or NotIn,
                                      the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                      the values array must be empty. If the operator is Gt or Lt, the values
                                      array must have a single element, which will be interpreted as an integer.
                                      This array is replaced during a strategic merge patch.
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                required:
                                - key
                                - operator
                                type: object
                              type: array
                              x-kubernetes-list-type: atomic
                          type: object
                          x-kubernetes-map-type: atomic
                        type: array
                        x-kubernetes-list-type: atomic
                    required:
                    - nodeSelectorTerms
                    type: object
                    x-kubernetes-map-type: atomic
                  resources:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: Resources specifies the resource limits and requests
                      for the ServiceDaemonSet.
                    type: object
                  updateStrategy:
                    description: UpdateStrategy specifies the DeaemonSet update strategy
                      for the ServiceDaemonset.
                    properties:
                      rollingUpdate:
                        description: |-
                          Rolling update config params. Present only if type = "RollingUpdate".
                          ---
                          TODO: Update this to follow our convention for oneOf, whatever we decide it
                          to be. Same as Deployment `strategy.rollingUpdate`.
                          See https://github.com/kubernetes/kubernetes/issues/35345
                        properties:
                          maxSurge:
                            anyOf:
                            - type: integer
                            - type: string
                            description: |-
                              The maximum number of nodes with an existing available DaemonSet pod that
                              can have an updated DaemonSet pod during during an update.
                              Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
                              This can not be 0 if MaxUnavailable is 0.
                              Absolute number is calculated from percentage by rounding up to a minimum of 1.
                              Default value is 0.
                              Example: when this is set to 30%, at most 30% of the total number of nodes
                              that should be running the daemon pod (i.e. status.desiredNumberScheduled)
                              can have their a new pod created before the old pod is marked as deleted.
                              The update starts by launching new pods on 30% of nodes. Once an updated
                              pod is available (Ready for at least minReadySeconds) the old DaemonSet pod
                              on that node is marked deleted. If the old pod becomes unavailable for any
                              reason (Ready transitions to false, is evicted, or is drained) an updated
                              pod is immediatedly created on that node without considering surge limits.
                              Allowing surge implies the possibility that the resources consumed by the
                              daemonset on any given node can double if the readiness check fails, and
                              so resource intensive daemonsets should take into account that they may
                              cause evictions during disruption.
                            x-kubernetes-int-or-string: true
                          maxUnavailable:
                            anyOf:
                            - type: integer
                            - type: string
                            description: |-
                              The maximum number of DaemonSet pods that can be unavailable during the
                              update. Value can be an absolute number (ex: 5) or a percentage of total
                              number of DaemonSet pods at the start of the update (ex: 10%). Absolute
                              number is calculated from percentage by rounding up.
                              This cannot be 0 if MaxSurge is 0
                              Default value is 1.
                              Example: when this is set to 30%, at most 30% of the total number of nodes
                              that should be running the daemon pod (i.e. status.desiredNumberScheduled)
                              can have their pods stopped for an update at any given time. The update
                              starts by stopping at most 30% of those DaemonSet pods and then brings
                              up new DaemonSet pods in their place. Once the new pods are available,
                              it then proceeds onto other DaemonSet pods, thus ensuring that at least
                              70% of original number of DaemonSet pods are available at all times during
                              the update.
                            x-kubernetes-int-or-string: true
                        type: object
                      type:
                        description: Type of daemon set update. Can be "RollingUpdate"
                          or "OnDelete". Default is RollingUpdate.
                        type: string
                    type: object
                type: object
              serviceID:
                type: string
            required:
            - helmChart
            type: object
          status:
            description: DPUServiceStatus defines the observed state of DPUService
            properties:
              conditions:
                description: Conditions defines current service state.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource.\n---\nThis struct is intended for
                    direct use as an array at the field path .status.conditions.  For
                    example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                    observations of a foo's current state.\n\t    // Known .status.conditions.type
                    are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                    +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                    \   // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                    \   // other fields\n\t}"
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        ---
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                        useful (see .node.status.conditions), the ability to deconflict is important.
                        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration records the Generation observed on
                  the object the last time it was patched.
                format: int64
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  labels:
    dpf.nvidia.com/component: dpuservice-controller-manager
  name: dpuservicetemplates.svc.dpf.nvidia.com
spec:
  group: svc.dpf.nvidia.com
  names:
    kind: DPUServiceTemplate
    listKind: DPUServiceTemplateList
    plural: dpuservicetemplates
    singular: dpuservicetemplate
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: |-
          DPUServiceTemplate is the Schema for the dpuservicetemplates API. This object is intended to be used in
          conjunction with a DPUDeployment object. This object is the template from which the DPUService will be created. It
          contains configuration options related to resources required by the service to be deployed. The rest of the
          configuration options must be defined in a DPUServiceConfiguration object.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: DPUServiceTemplateSpec defines the desired state of DPUServiceTemplate
            properties:
              resourceRequirements:
                additionalProperties:
                  anyOf:
                  - type: integer
                  - type: string
                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                  x-kubernetes-int-or-string: true
                description: ResourceRequirements contains the overall resources required
                  by this particular service to run on a single node
                type: object
              service:
                description: |-
                  Service is the name of the DPU service this configuration refers to. It must match .spec.service of a
                  DPUServiceConfiguration object and one of the keys in .spec.services of a DPUDeployment object.
                type: string
              serviceDaemonSet:
                description: ServiceDaemonSet contains settings related to the underlying
                  DaemonSet that is part of the Helm chart
                properties:
                  resources:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: Resources specifies the resource limits and requests
                      for the ServiceDaemonSet.
                    type: object
                type: object
            required:
            - service
            type: object
            x-kubernetes-validations:
            - message: Spec is immutable
              rule: self == oldSelf
          status:
            description: DPUServiceTemplateStatus defines the observed state of DPUServiceTemplate
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: dpf-operator
    app.kubernetes.io/instance: controller-manager-sa
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: dpf-operator
    dpf.nvidia.com/component: dpuservice-controller-manager
  name: dpuservice-controller-manager
  namespace: dpuservice-controller-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: dpf-operator
    app.kubernetes.io/instance: leader-election-role
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: role
    app.kubernetes.io/part-of: dpf-operator
    dpf.nvidia.com/component: dpuservice-controller-manager
  name: dpuservice-leader-election-role
  namespace: dpuservice-controller-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    dpf.nvidia.com/component: dpuservice-controller-manager
  name: dpuservice-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - events
  - persistentvolumeclaims
  - secrets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - events
  - secrets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - create
- apiGroups:
  - argoproj.io
  resources:
  - applications
  - appprojects
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
- apiGroups:
  - kamaji.clastix.io
  resources:
  - tenantcontrolplanes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - nv-ipam.nvidia.com
  resources:
  - ippools
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - sfc.dpf.nvidia.com
  resources:
  - dpuservicechains
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - sfc.dpf.nvidia.com
  resources:
  - dpuservicechains/finalizers
  verbs:
  - update
- apiGroups:
  - sfc.dpf.nvidia.com
  resources:
  - dpuservicechains/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - sfc.dpf.nvidia.com
  resources:
  - dpuserviceinterfaces
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - sfc.dpf.nvidia.com
  resources:
  - dpuserviceinterfaces/finalizers
  verbs:
  - update
- apiGroups:
  - sfc.dpf.nvidia.com
  resources:
  - dpuserviceinterfaces/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - sfc.dpf.nvidia.com
  resources:
  - dpuserviceipams
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - sfc.dpf.nvidia.com
  resources:
  - dpuserviceipams/finalizers
  verbs:
  - update
- apiGroups:
  - sfc.dpf.nvidia.com
  resources:
  - dpuserviceipams/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - svc.dpf.nvidia.com
  resources:
  - dpuservices
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - svc.dpf.nvidia.com
  resources:
  - dpuservices/finalizers
  verbs:
  - update
- apiGroups:
  - svc.dpf.nvidia.com
  resources:
  - dpuservices/status
  verbs:
  - get
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: dpf-operator
    app.kubernetes.io/instance: leader-election-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: rolebinding
    app.kubernetes.io/part-of: dpf-operator
    dpf.nvidia.com/component: dpuservice-controller-manager
  name: dpuservice-leader-election-rolebinding
  namespace: dpuservice-controller-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: dpuservice-leader-election-role
subjects:
- kind: ServiceAccount
  name: dpuservice-controller-manager
  namespace: dpuservice-controller-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: dpf-operator
    app.kubernetes.io/instance: manager-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: dpf-operator
    dpf.nvidia.com/component: dpuservice-controller-manager
  name: dpuservice-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dpuservice-manager-role
subjects:
- kind: ServiceAccount
  name: dpuservice-controller-manager
  namespace: dpuservice-controller-system
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: dpf-operator
    app.kubernetes.io/instance: system
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: namespace
    app.kubernetes.io/part-of: dpf-operator
    control-plane: controller-manager
    dpf.nvidia.com/component: dpuservice-controller-manager
  name: dpuservice-webhook-service
  namespace: dpuservice-controller-system
spec:
  ports:
  - port: 443
    protocol: TCP
    targetPort: 9443
  selector:
    control-plane: controller-manager
    dpf.nvidia.com/component: dpuservice-controller-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: dpf-dpuservice
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: deployment
    app.kubernetes.io/part-of: dpf-dpuservice
    control-plane: controller-manager
    dpf.nvidia.com/component: dpuservice-controller-manager
  name: dpuservice-controller-manager
  namespace: dpuservice-controller-system
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
      dpf.nvidia.com/component: dpuservice-controller-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
        dpf.nvidia.com/component: dpuservice-controller-manager
    spec:
      containers:
      - command:
        - /dpuservice
        image: example.com/dpf-system:v0.1.0
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        - containerPort: 8080
          name: metrics
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
      serviceAccountName: dpuservice-controller-manager
      terminationGracePeriodSeconds: 10
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: dpuservice-webhook-server-cert
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: dpf-operator
    app.kubernetes.io/instance: system
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: namespace
    app.kubernetes.io/part-of: dpf-operator
    control-plane: controller-manager
    dpf.nvidia.com/component: dpuservice-controller-manager
  name: dpuservice-serving-cert
  namespace: dpuservice-controller-system
spec:
  dnsNames:
  - dpuservice-webhook-service.dpuservice-controller-system.svc
  - dpuservice-webhook-service.dpuservice-controller-system.svc.cluster.local
  issuerRef:
    kind: Issuer
    name: dpuservice-selfsigned-issuer
  secretName: dpuservice-webhook-server-cert
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: dpf-operator
    app.kubernetes.io/instance: system
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: namespace
    app.kubernetes.io/part-of: dpf-operator
    control-plane: controller-manager
    dpf.nvidia.com/component: dpuservice-controller-manager
  name: dpuservice-selfsigned-issuer
  namespace: dpuservice-controller-system
spec:
  selfSigned: {}
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: dpuservice-controller-system/dpuservice-serving-cert
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/instance: system
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: namespace
    app.kubernetes.io/part-of: dpf-ovnkubernetes-operator
    control-plane: controller-manager
    dpf.nvidia.com/component: dpuservice-controller-manager
  name: dpuservice-validating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: dpuservice-webhook-service
      namespace: dpuservice-controller-system
      path: /validate-sfc-dpf-nvidia-com-v1alpha1-dpuserviceipam
  failurePolicy: Fail
  name: ipam-validator.sfc.dpf.nvidia.com
  rules:
  - apiGroups:
    - sfc.dpf.nvidia.com
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - dpuserviceipams
  sideEffects: None
