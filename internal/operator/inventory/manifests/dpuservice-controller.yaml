apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.16.5
    helm.sh/resource-policy: keep
  labels:
    dpu.nvidia.com/component: dpuservice-controller-manager
  name: dpuserviceconfigurations.svc.dpu.nvidia.com
spec:
  group: svc.dpu.nvidia.com
  names:
    kind: DPUServiceConfiguration
    listKind: DPUServiceConfigurationList
    plural: dpuserviceconfigurations
    singular: dpuserviceconfiguration
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: |-
          DPUServiceConfiguration is the Schema for the dpuserviceconfigurations API. This object is intended to be used in
          conjunction with a DPUDeployment object. This object is the template from which the DPUService will be created. It
          contains all configuration options from the user to be provided to the service itself via the helm chart values.
          This object doesn't allow configuration of nodeSelector and resources in purpose as these are delegated to the
          DPUDeployment and DPUServiceTemplate accordingly.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: DPUServiceConfigurationSpec defines the desired state of
              DPUServiceConfiguration
            properties:
              deploymentServiceName:
                description: |-
                  DeploymentServiceName is the name of the DPU service this configuration refers to. It must match
                  .spec.deploymentServiceName of a DPUServiceTemplate object and one of the keys in .spec.services of a
                  DPUDeployment object.
                type: string
              interfaces:
                description: Interfaces specifies the DPUServiceInterface to be generated
                  for the generated DPUService.
                items:
                  description: ServiceInterfaceTemplate contains the information related
                    to an interface of the DPUService
                  properties:
                    name:
                      description: Name is the name of the interface
                      type: string
                    network:
                      description: |-
                        Network is the Network Attachment Definition in the form of "namespace/name"
                        or just "name" if the namespace is the same as the namespace the pod is running.
                      type: string
                  required:
                  - name
                  - network
                  type: object
                maxItems: 50
                minItems: 1
                type: array
              serviceConfiguration:
                description: ServiceConfiguration contains fields that are configured
                  on the generated DPUService.
                properties:
                  deployInCluster:
                    description: DeployInCluster indicates if the DPUService Helm
                      Chart will be deployed on the Host cluster. Default to false.
                    type: boolean
                  helmChart:
                    description: |-
                      HelmChart reflects the Helm related configuration. The user is supposed to configure values specific to that
                      DPUServiceConfiguration used in a DPUDeployment and should not specify values that could be shared across multiple
                      DPUDeployments using different DPUServiceConfigurations. These values are merged with values specified in the
                      DPUServiceTemplate. In case of conflict, the DPUServiceConfiguration values take precedence.
                    properties:
                      values:
                        description: Values specifies Helm values to be passed to
                          Helm template, defined as a map. This takes precedence over
                          Values.
                        type: object
                        x-kubernetes-preserve-unknown-fields: true
                    type: object
                  serviceDaemonSet:
                    description: ServiceDaemonSet contains settings related to the
                      underlying DaemonSet that is part of the Helm chart
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: Annotations specifies annotations which are added
                          to the ServiceDaemonSet.
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: Labels specifies labels which are added to the
                          ServiceDaemonSet.
                        type: object
                    type: object
                type: object
            required:
            - deploymentServiceName
            type: object
          status:
            description: DPUServiceConfigurationStatus defines the observed state
              of DPUServiceConfiguration
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.16.5
    helm.sh/resource-policy: keep
  labels:
    dpu.nvidia.com/component: dpuservice-controller-manager
  name: dpuservices.svc.dpu.nvidia.com
spec:
  group: svc.dpu.nvidia.com
  names:
    kind: DPUService
    listKind: DPUServiceList
    plural: dpuservices
    singular: dpuservice
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].reason
      name: Phase
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: DPUService is the Schema for the dpuservices API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: DPUServiceSpec defines the desired state of DPUService
            properties:
              deployInCluster:
                description: |-
                  DeployInCluster indicates if the DPUService Helm Chart will be deployed on
                  the Host cluster. Default to false.
                type: boolean
              helmChart:
                description: HelmChart reflects the Helm related configuration
                properties:
                  source:
                    description: Source specifies information about the Helm chart
                    properties:
                      chart:
                        description: Chart is the name of the helm chart.
                        type: string
                      path:
                        description: Path is the location of the chart inside the
                          repo.
                        type: string
                      releaseName:
                        description: ReleaseName is the name to give to the release
                          generate from the DPUService.
                        type: string
                      repoURL:
                        description: |-
                          RepoURL specifies the URL to the repository that contains the application Helm chart.
                          The URL must begin with either 'oci://' or 'https://', ensuring it points to a valid
                          OCI registry or a web-based repository.
                        pattern: ^(oci://|https://).+$
                        type: string
                      version:
                        description: Version is a semver tag for the Chart's version.
                        minLength: 1
                        type: string
                    required:
                    - repoURL
                    - version
                    type: object
                  values:
                    description: Values specifies Helm values to be passed to Helm
                      template, defined as a map. This takes precedence over Values.
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                required:
                - source
                type: object
              interfaces:
                description: |-
                  Interfaces specifies the DPUServiceInterface names that the DPUService
                  uses in the same namespace.
                items:
                  type: string
                maxItems: 50
                minItems: 1
                type: array
              paused:
                description: |-
                  Paused indicates that the DPUService is paused.
                  Underlying resources are also paused when this is set to true.
                  No deletion of resources will occur when this is set to true.
                type: boolean
              serviceDaemonSet:
                description: ServiceDaemonSet specifies the configuration for the
                  ServiceDaemonSet.
                properties:
                  annotations:
                    additionalProperties:
                      type: string
                    description: Annotations specifies annotations which are added
                      to the ServiceDaemonSet.
                    type: object
                  labels:
                    additionalProperties:
                      type: string
                    description: Labels specifies labels which are added to the ServiceDaemonSet.
                    type: object
                  nodeSelector:
                    description: NodeSelector specifies which Nodes to deploy the
                      ServiceDaemonSet to.
                    properties:
                      nodeSelectorTerms:
                        description: Required. A list of node selector terms. The
                          terms are ORed.
                        items:
                          description: |-
                            A null or empty node selector term matches no objects. The requirements of
                            them are ANDed.
                            The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
                          properties:
                            matchExpressions:
                              description: A list of node selector requirements by
                                node's labels.
                              items:
                                description: |-
                                  A node selector requirement is a selector that contains values, a key, and an operator
                                  that relates the key and values.
                                properties:
                                  key:
                                    description: The label key that the selector applies
                                      to.
                                    type: string
                                  operator:
                                    description: |-
                                      Represents a key's relationship to a set of values.
                                      Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                    type: string
                                  values:
                                    description: |-
                                      An array of string values. If the operator is In or NotIn,
                                      the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                      the values array must be empty. If the operator is Gt or Lt, the values
                                      array must have a single element, which will be interpreted as an integer.
                                      This array is replaced during a strategic merge patch.
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                required:
                                - key
                                - operator
                                type: object
                              type: array
                              x-kubernetes-list-type: atomic
                            matchFields:
                              description: A list of node selector requirements by
                                node's fields.
                              items:
                                description: |-
                                  A node selector requirement is a selector that contains values, a key, and an operator
                                  that relates the key and values.
                                properties:
                                  key:
                                    description: The label key that the selector applies
                                      to.
                                    type: string
                                  operator:
                                    description: |-
                                      Represents a key's relationship to a set of values.
                                      Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                    type: string
                                  values:
                                    description: |-
                                      An array of string values. If the operator is In or NotIn,
                                      the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                      the values array must be empty. If the operator is Gt or Lt, the values
                                      array must have a single element, which will be interpreted as an integer.
                                      This array is replaced during a strategic merge patch.
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                required:
                                - key
                                - operator
                                type: object
                              type: array
                              x-kubernetes-list-type: atomic
                          type: object
                          x-kubernetes-map-type: atomic
                        type: array
                        x-kubernetes-list-type: atomic
                    required:
                    - nodeSelectorTerms
                    type: object
                    x-kubernetes-map-type: atomic
                  updateStrategy:
                    description: UpdateStrategy specifies the DeaemonSet update strategy
                      for the ServiceDaemonset.
                    properties:
                      rollingUpdate:
                        description: Rolling update config params. Present only if
                          type = "RollingUpdate".
                        properties:
                          maxSurge:
                            anyOf:
                            - type: integer
                            - type: string
                            description: |-
                              The maximum number of nodes with an existing available DaemonSet pod that
                              can have an updated DaemonSet pod during during an update.
                              Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
                              This can not be 0 if MaxUnavailable is 0.
                              Absolute number is calculated from percentage by rounding up to a minimum of 1.
                              Default value is 0.
                              Example: when this is set to 30%, at most 30% of the total number of nodes
                              that should be running the daemon pod (i.e. status.desiredNumberScheduled)
                              can have their a new pod created before the old pod is marked as deleted.
                              The update starts by launching new pods on 30% of nodes. Once an updated
                              pod is available (Ready for at least minReadySeconds) the old DaemonSet pod
                              on that node is marked deleted. If the old pod becomes unavailable for any
                              reason (Ready transitions to false, is evicted, or is drained) an updated
                              pod is immediatedly created on that node without considering surge limits.
                              Allowing surge implies the possibility that the resources consumed by the
                              daemonset on any given node can double if the readiness check fails, and
                              so resource intensive daemonsets should take into account that they may
                              cause evictions during disruption.
                            x-kubernetes-int-or-string: true
                          maxUnavailable:
                            anyOf:
                            - type: integer
                            - type: string
                            description: |-
                              The maximum number of DaemonSet pods that can be unavailable during the
                              update. Value can be an absolute number (ex: 5) or a percentage of total
                              number of DaemonSet pods at the start of the update (ex: 10%). Absolute
                              number is calculated from percentage by rounding up.
                              This cannot be 0 if MaxSurge is 0
                              Default value is 1.
                              Example: when this is set to 30%, at most 30% of the total number of nodes
                              that should be running the daemon pod (i.e. status.desiredNumberScheduled)
                              can have their pods stopped for an update at any given time. The update
                              starts by stopping at most 30% of those DaemonSet pods and then brings
                              up new DaemonSet pods in their place. Once the new pods are available,
                              it then proceeds onto other DaemonSet pods, thus ensuring that at least
                              70% of original number of DaemonSet pods are available at all times during
                              the update.
                            x-kubernetes-int-or-string: true
                        type: object
                      type:
                        description: Type of daemon set update. Can be "RollingUpdate"
                          or "OnDelete". Default is RollingUpdate.
                        type: string
                    type: object
                type: object
              serviceID:
                description: ServiceID is the ID of the service that the DPUService
                  is associated with.
                type: string
            required:
            - helmChart
            type: object
            x-kubernetes-validations:
            - message: serviceID must be provided when interfaces are provided
              rule: (has(self.interfaces) && has(self.serviceID)) || (!has(self.interfaces)
                && !has(self.serviceID)) || has(self.serviceID)
          status:
            description: DPUServiceStatus defines the observed state of DPUService
            properties:
              conditions:
                description: Conditions defines current service state.
                items:
                  description: Condition contains details for one aspect of the current
                    state of this API Resource.
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration records the Generation observed on
                  the object the last time it was patched.
                format: int64
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.16.5
    helm.sh/resource-policy: keep
  labels:
    dpu.nvidia.com/component: dpuservice-controller-manager
  name: dpuservicetemplates.svc.dpu.nvidia.com
spec:
  group: svc.dpu.nvidia.com
  names:
    kind: DPUServiceTemplate
    listKind: DPUServiceTemplateList
    plural: dpuservicetemplates
    singular: dpuservicetemplate
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: |-
          DPUServiceTemplate is the Schema for the DPUServiceTemplate API. This object is intended to be used in
          conjunction with a DPUDeployment object. This object is the template from which the DPUService will be created. It
          contains configuration options related to resources required by the service to be deployed. The rest of the
          configuration options must be defined in a DPUServiceConfiguration object.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: DPUServiceTemplateSpec defines the desired state of DPUServiceTemplate
            properties:
              deploymentServiceName:
                description: |-
                  DeploymentServiceName is the name of the DPU service this configuration refers to. It must match
                  .spec.deploymentServiceName of a DPUServiceConfiguration object and one of the keys in .spec.services of a
                  DPUDeployment object.
                type: string
              helmChart:
                description: |-
                  HelmChart reflects the Helm related configuration. The user is supposed to configure the values that are static
                  across any DPUServiceConfiguration used with this DPUServiceTemplate in a DPUDeployment. These values act as a
                  baseline and are merged with values specified in the DPUServiceConfiguration. In case of conflict, the
                  DPUServiceConfiguration values take precedence.
                properties:
                  source:
                    description: Source specifies information about the Helm chart
                    properties:
                      chart:
                        description: Chart is the name of the helm chart.
                        type: string
                      path:
                        description: Path is the location of the chart inside the
                          repo.
                        type: string
                      releaseName:
                        description: ReleaseName is the name to give to the release
                          generate from the DPUService.
                        type: string
                      repoURL:
                        description: |-
                          RepoURL specifies the URL to the repository that contains the application Helm chart.
                          The URL must begin with either 'oci://' or 'https://', ensuring it points to a valid
                          OCI registry or a web-based repository.
                        pattern: ^(oci://|https://).+$
                        type: string
                      version:
                        description: Version is a semver tag for the Chart's version.
                        minLength: 1
                        type: string
                    required:
                    - repoURL
                    - version
                    type: object
                  values:
                    description: Values specifies Helm values to be passed to Helm
                      template, defined as a map. This takes precedence over Values.
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                required:
                - source
                type: object
              resourceRequirements:
                additionalProperties:
                  anyOf:
                  - type: integer
                  - type: string
                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                  x-kubernetes-int-or-string: true
                description: ResourceRequirements contains the overall resources required
                  by this particular service to run on a single node
                type: object
            required:
            - deploymentServiceName
            - helmChart
            type: object
          status:
            description: DPUServiceTemplateStatus defines the observed state of DPUServiceTemplate
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.16.5
    helm.sh/resource-policy: keep
  labels:
    dpu.nvidia.com/component: dpuservice-controller-manager
  name: dpudeployments.svc.dpu.nvidia.com
spec:
  group: svc.dpu.nvidia.com
  names:
    kind: DPUDeployment
    listKind: DPUDeploymentList
    plural: dpudeployments
    singular: dpudeployment
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].reason
      name: Phase
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: |-
          DPUDeployment is the Schema for the dpudeployments API. This object connects DPUServices with specific BFBs and
          DPUServiceChains.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: DPUDeploymentSpec defines the desired state of DPUDeployment
            properties:
              dpus:
                description: DPUs contains the DPU related configuration
                properties:
                  bfb:
                    description: |-
                      BFB is the name of the BFB object to be used in this DPUDeployment. It must be in the same namespace as the
                      DPUDeployment.
                    type: string
                  dpuSets:
                    description: DPUSets contains configuration for each DPUSet that
                      is going to be created by the DPUDeployment
                    items:
                      description: DPUSet contains configuration for the DPUSet to
                        be created by the DPUDeployment
                      properties:
                        dpuAnnotations:
                          additionalProperties:
                            type: string
                          description: DPUAnnotations is the annotations to be added
                            to the DPU object created by the DPUSet.
                          type: object
                        dpuSelector:
                          additionalProperties:
                            type: string
                          description: DPUSelector defines the DPUs that the DPUSet
                            should target
                          type: object
                        nameSuffix:
                          description: NameSuffix is the suffix to be added to the
                            name of the DPUSet object created by the DPUDeployment.
                          maxLength: 63
                          minLength: 1
                          type: string
                        nodeSelector:
                          description: NodeSelector defines the nodes that the DPUSet
                            should target
                          properties:
                            matchExpressions:
                              description: matchExpressions is a list of label selector
                                requirements. The requirements are ANDed.
                              items:
                                description: |-
                                  A label selector requirement is a selector that contains values, a key, and an operator that
                                  relates the key and values.
                                properties:
                                  key:
                                    description: key is the label key that the selector
                                      applies to.
                                    type: string
                                  operator:
                                    description: |-
                                      operator represents a key's relationship to a set of values.
                                      Valid operators are In, NotIn, Exists and DoesNotExist.
                                    type: string
                                  values:
                                    description: |-
                                      values is an array of string values. If the operator is In or NotIn,
                                      the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                      the values array must be empty. This array is replaced during a strategic
                                      merge patch.
                                    items:
                                      type: string
                                    type: array
                                    x-kubernetes-list-type: atomic
                                required:
                                - key
                                - operator
                                type: object
                              type: array
                              x-kubernetes-list-type: atomic
                            matchLabels:
                              additionalProperties:
                                type: string
                              description: |-
                                matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                                map is equivalent to an element of matchExpressions, whose key field is "key", the
                                operator is "In", and the values array contains only "value". The requirements are ANDed.
                              type: object
                          type: object
                          x-kubernetes-map-type: atomic
                      required:
                      - nameSuffix
                      type: object
                    maxItems: 50
                    minItems: 1
                    type: array
                  flavor:
                    description: |-
                      Flavor is the name of the DPUFlavor object to be used in this DPUDeployment. It must be in the same namespace as
                      the DPUDeployment.
                    type: string
                required:
                - bfb
                - flavor
                type: object
              serviceChains:
                description: ServiceChains contains the configuration related to the
                  DPUServiceChains that the DPUDeployment creates.
                items:
                  description: DPUDeploymentSwitch holds the ports that are connected
                    in switch topology
                  properties:
                    ports:
                      description: Ports contains the ports of the switch
                      items:
                        description: DPUDeploymentPort defines how a port can be configured
                        properties:
                          service:
                            description: |-
                              Service holds configuration that helps configure the Service Function Chain and identify a port associated with
                              a DPUService
                            properties:
                              interface:
                                description: Interface name is the name of the interface
                                  as defined in the DPUServiceTemplate
                                type: string
                              ipam:
                                description: IPAM defines the IPAM configuration that
                                  is configured in the Service Function Chain
                                properties:
                                  defaultGateway:
                                    description: DefaultGateway adds gateway as default
                                      gateway in the routes list if true.
                                    type: boolean
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: Labels matching service IPAM
                                    maxProperties: 50
                                    minProperties: 1
                                    type: object
                                  setDefaultRoute:
                                    description: SetDefaultRoute adds a default route
                                      to the routing table if true.
                                    type: boolean
                                required:
                                - matchLabels
                                type: object
                              name:
                                description: Name is the name of the service as defined
                                  in the DPUDeployment Spec
                                type: string
                            required:
                            - interface
                            - name
                            type: object
                          serviceInterface:
                            description: |-
                              ServiceInterface holds configuration that helps configure the Service Function Chain and identify a user defined
                              port
                            properties:
                              ipam:
                                description: IPAM defines the IPAM configuration when
                                  referencing a serviceInterface of type 'service'
                                properties:
                                  defaultGateway:
                                    description: DefaultGateway adds gateway as default
                                      gateway in the routes list if true.
                                    type: boolean
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: Labels matching service IPAM
                                    maxProperties: 50
                                    minProperties: 1
                                    type: object
                                  setDefaultRoute:
                                    description: SetDefaultRoute adds a default route
                                      to the routing table if true.
                                    type: boolean
                                required:
                                - matchLabels
                                type: object
                              matchLabels:
                                additionalProperties:
                                  type: string
                                description: Labels matching service interface
                                maxProperties: 50
                                minProperties: 1
                                type: object
                            required:
                            - matchLabels
                            type: object
                        type: object
                        x-kubernetes-validations:
                        - message: either service or serviceInterface must be specified
                          rule: (has(self.service) && !has(self.serviceInterface))
                            || (!has(self.service) && has(self.serviceInterface))
                      maxItems: 50
                      minItems: 1
                      type: array
                  required:
                  - ports
                  type: object
                maxItems: 50
                minItems: 1
                type: array
              services:
                additionalProperties:
                  description: DPUDeploymentServiceConfiguration describes the configuration
                    of a particular Service
                  properties:
                    serviceConfiguration:
                      description: |-
                        ServiceConfiguration is the name of the DPUServiceConfiguration object to be used for this Service. It must be
                        in the same namespace as the DPUDeployment.
                      type: string
                    serviceTemplate:
                      description: |-
                        ServiceTemplate is the name of the DPUServiceTemplate object to be used for this Service. It must be in the same
                        namespace as the DPUDeployment.
                      type: string
                  required:
                  - serviceConfiguration
                  - serviceTemplate
                  type: object
                description: |-
                  Services contains the DPUDeploymentService related configuration. The key is the deploymentServiceName and the value is its
                  configuration. All underlying objects must specify the same deploymentServiceName in order to be able to be consumed by the
                  DPUDeployment.
                type: object
            required:
            - dpus
            - serviceChains
            - services
            type: object
          status:
            description: DPUDeploymentStatus defines the observed state of DPUDeployment
            properties:
              conditions:
                description: Conditions reflect the status of the object
                items:
                  description: Condition contains details for one aspect of the current
                    state of this API Resource.
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration records the Generation observed on
                  the object the last time it was patched.
                format: int64
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.16.5
    helm.sh/resource-policy: keep
  labels:
    dpu.nvidia.com/component: dpuservice-controller-manager
  name: dpuservicecredentialrequests.svc.dpu.nvidia.com
spec:
  group: svc.dpu.nvidia.com
  names:
    kind: DPUServiceCredentialRequest
    listKind: DPUServiceCredentialRequestList
    plural: dpuservicecredentialrequests
    singular: dpuservicecredentialrequest
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].reason
      name: Phase
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: DPUServiceCredentialRequest is the Schema for the dpuserviceCredentialRequests
          API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: DPUServiceCredentialRequestSpec defines the desired state
              of DPUServiceCredentialRequest
            properties:
              duration:
                description: |-
                  Duration is the duration for which the token will be valid.
                  Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.
                  e.g. "1h", "1m", "1s", "1ms", "1.5h", "2h45m".
                  Value duration must not be less than 10 minutes.
                  **Note:** The maximum TTL for a token is 24 hours, after which the token
                  will be rotated.
                pattern: ^([0-9]+(\.[0-9]+)?(ms|s|m|h))+$
                type: string
              metadata:
                description: ObjectMeta defines the metadata of the secret.
                properties:
                  annotations:
                    additionalProperties:
                      type: string
                    description: Annotations is a map of string keys and values.
                    type: object
                  labels:
                    additionalProperties:
                      type: string
                    description: Labels is a map of string keys and values.
                    type: object
                type: object
              secret:
                description: |-
                  Secret defines the needed information to create the secret.
                  The secret will be of the type specified in the `spec.type` field.
                properties:
                  name:
                    description: Name of the object.
                    type: string
                  namespace:
                    description: |-
                      Namespace of the object, if not provided the object will be looked up in
                      the same namespace as the referring object
                    type: string
                required:
                - name
                type: object
              serviceAccount:
                description: ServiceAccount defines the needed information to create
                  the service account.
                properties:
                  name:
                    description: Name of the object.
                    type: string
                  namespace:
                    description: |-
                      Namespace of the object, if not provided the object will be looked up in
                      the same namespace as the referring object
                    type: string
                required:
                - name
                type: object
              targetCluster:
                description: |-
                  TargetCluster defines the target cluster where the service account will
                  be created, and where a token for that service account will be requested.
                  If not provided, the token will be requested for the same cluster where
                  the DPUServiceCredentialRequest object is created.
                properties:
                  name:
                    description: Name of the object.
                    type: string
                  namespace:
                    description: |-
                      Namespace of the object, if not provided the object will be looked up in
                      the same namespace as the referring object
                    type: string
                required:
                - name
                type: object
              type:
                description: |-
                  Type is the type of the secret that will be created.
                  The supported types are `kubeconfig` and `tokenFile`.
                  If `kubeconfig` is selected, the secret will contain a kubeconfig file,
                  that can be used to access the cluster.
                  If `tokenFile` is selected, the secret will contain a token file and serveral
                  environment variables that can be used to access the cluster. It can be used
                  with https://github.com/kubernetes/client-go/blob/v11.0.0/rest/config.go#L52
                  to create a client that will hanle file rotation.
                enum:
                - kubeconfig
                - tokenFile
                type: string
            required:
            - secret
            - serviceAccount
            - type
            type: object
          status:
            description: DPUServiceCredentialRequestStatus defines the observed state
              of DPUServiceCredentialRequest
            properties:
              conditions:
                description: Conditions defines current service state.
                items:
                  description: Condition contains details for one aspect of the current
                    state of this API Resource.
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              expirationTimestamp:
                description: ExpirationTimestamp is the time when the token will expire.
                format: date-time
                type: string
              issuedAt:
                description: IssuedAt is the time when the token was issued.
                format: date-time
                type: string
              secret:
                description: |-
                  Sercet is the namespaced name of the Secret resource created by the controller for
                  the DPUServiceCredentialRequest.
                type: string
              serviceAccount:
                description: |-
                  ServiceAccount is the namespaced name of the ServiceAccount resource created by
                  the controller for the DPUServiceCredentialRequest.
                type: string
              targetCluster:
                description: |-
                  TargetCluster is the cluster where the service account was created.
                  It has to be persisted in the status to be able to delete the service account
                  when the DPUServiceCredentialRequest is updated.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: dpuservice-controller-system/dpuservice-serving-cert
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/instance: system
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: namespace
    app.kubernetes.io/part-of: dpf-ovnkubernetes-operator
    control-plane: controller-manager
    dpu.nvidia.com/component: dpuservice-controller-manager
  name: dpuservice-validating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: dpuservice-webhook-service
      namespace: dpuservice-controller-system
      path: /validate-svc-dpu-nvidia-com-v1alpha1-dpuserviceipam
  failurePolicy: Fail
  name: ipam-validator.svc.dpu.nvidia.com
  rules:
  - apiGroups:
    - svc.dpu.nvidia.com
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - dpuserviceipams
  sideEffects: None
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: dpf-operator
    app.kubernetes.io/instance: system
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: namespace
    app.kubernetes.io/part-of: dpf-operator
    control-plane: controller-manager
    dpu.nvidia.com/component: dpuservice-controller-manager
  name: dpuservice-webhook-service
  namespace: dpuservice-controller-system
spec:
  ports:
  - port: 443
    protocol: TCP
    targetPort: 9443
  selector:
    control-plane: controller-manager
    dpu.nvidia.com/component: dpuservice-controller-manager
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: dpf-operator
    app.kubernetes.io/instance: controller-manager-sa
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: dpf-operator
    dpu.nvidia.com/component: dpuservice-controller-manager
  name: dpuservice-controller-manager
  namespace: dpuservice-controller-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    dpu.nvidia.com/component: dpuservice-controller-manager
  name: dpuservice-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - events
  - secrets
  - serviceaccounts
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - serviceaccounts/token
  verbs:
  - create
- apiGroups:
  - argoproj.io
  resources:
  - applications
  - appprojects
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
- apiGroups:
  - kamaji.clastix.io
  resources:
  - tenantcontrolplanes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - nv-ipam.nvidia.com
  resources:
  - ippools
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.dpu.nvidia.com
  resources:
  - dpfoperatorconfigs
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - provisioning.dpu.nvidia.com
  resources:
  - bfbs
  - dpuflavors
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - provisioning.dpu.nvidia.com
  resources:
  - bfbs/finalizers
  - dpuflavors/finalizers
  verbs:
  - update
- apiGroups:
  - provisioning.dpu.nvidia.com
  resources:
  - dpuclusters
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - provisioning.dpu.nvidia.com
  resources:
  - dpusets
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - svc.dpu.nvidia.com
  resources:
  - dpudeployments
  - dpuserviceconfigurations
  - dpuservicetemplates
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - svc.dpu.nvidia.com
  resources:
  - dpudeployments/finalizers
  - dpuservicechains/finalizers
  - dpuservicecredentialrequests/finalizers
  - dpuserviceinterfaces/finalizers
  - dpuserviceipams/finalizers
  - dpuservices/finalizers
  verbs:
  - update
- apiGroups:
  - svc.dpu.nvidia.com
  resources:
  - dpudeployments/status
  - dpuservicechains/status
  - dpuservicecredentialrequests/status
  - dpuserviceinterfaces/status
  - dpuserviceipams/status
  - dpuservices/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - svc.dpu.nvidia.com
  resources:
  - dpuservicechains
  - dpuserviceinterfaces
  - dpuservices
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - svc.dpu.nvidia.com
  resources:
  - dpuservicecredentialrequests
  - dpuserviceipams
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: dpf-operator
    app.kubernetes.io/instance: manager-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: dpf-operator
    dpu.nvidia.com/component: dpuservice-controller-manager
  name: dpuservice-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dpuservice-manager-role
subjects:
- kind: ServiceAccount
  name: dpuservice-controller-manager
  namespace: dpuservice-controller-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: dpf-operator
    app.kubernetes.io/instance: leader-election-role
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: role
    app.kubernetes.io/part-of: dpf-operator
    dpu.nvidia.com/component: dpuservice-controller-manager
  name: dpuservice-leader-election-role
  namespace: dpuservice-controller-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: dpf-operator
    app.kubernetes.io/instance: leader-election-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: rolebinding
    app.kubernetes.io/part-of: dpf-operator
    dpu.nvidia.com/component: dpuservice-controller-manager
  name: dpuservice-leader-election-rolebinding
  namespace: dpuservice-controller-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: dpuservice-leader-election-role
subjects:
- kind: ServiceAccount
  name: dpuservice-controller-manager
  namespace: dpuservice-controller-system
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: dpf-dpuservice
    app.kubernetes.io/instance: system
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: namespace
    app.kubernetes.io/part-of: dpf-dpuservice
    control-plane: controller-manager
    dpu.nvidia.com/component: dpuservice-controller-manager
  name: dpuservice-controller-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: dpf-dpuservice
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: deployment
    app.kubernetes.io/part-of: dpf-dpuservice
    control-plane: controller-manager
    dpu.nvidia.com/component: dpuservice-controller-manager
  name: dpuservice-controller-manager
  namespace: dpuservice-controller-system
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
      dpu.nvidia.com/component: dpuservice-controller-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
        dpu.nvidia.com/component: dpuservice-controller-manager
    spec:
      containers:
      - command:
        - /dpuservice
        - --leader-elect
        image: example.com/dpf-system:v0.1.0
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        - containerPort: 8080
          name: metrics
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
      serviceAccountName: dpuservice-controller-manager
      terminationGracePeriodSeconds: 10
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: dpuservice-webhook-server-cert
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: dpf-operator
    app.kubernetes.io/instance: system
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: namespace
    app.kubernetes.io/part-of: dpf-operator
    control-plane: controller-manager
    dpu.nvidia.com/component: dpuservice-controller-manager
  name: dpuservice-selfsigned-issuer
  namespace: dpuservice-controller-system
spec:
  selfSigned: {}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: dpf-operator
    app.kubernetes.io/instance: system
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: namespace
    app.kubernetes.io/part-of: dpf-operator
    control-plane: controller-manager
    dpu.nvidia.com/component: dpuservice-controller-manager
  name: dpuservice-serving-cert
  namespace: dpuservice-controller-system
spec:
  dnsNames:
  - dpuservice-webhook-service.dpuservice-controller-system.svc
  - dpuservice-webhook-service.dpuservice-controller-system.svc.cluster.local
  issuerRef:
    kind: Issuer
    name: dpuservice-selfsigned-issuer
  secretName: dpuservice-webhook-server-cert
