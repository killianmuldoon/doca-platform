// /*
// Copyright 2024 NVIDIA.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nvidia/doca-platform/internal/ovsutils (interfaces: API)
//
// Generated by this command:
//
//	mockgen -copyright_file ../../hack/boilerplate.go.txt --build_flags=--mod=mod -package ovsutils -destination mock_ovs.go . API
//

// Package ovsutils is a generated GoMock package.
package ovsutils

import (
	context "context"
	reflect "reflect"

	cache "github.com/ovn-org/libovsdb/cache"
	client "github.com/ovn-org/libovsdb/client"
	model "github.com/ovn-org/libovsdb/model"
	ovsdb "github.com/ovn-org/libovsdb/ovsdb"
	gomock "go.uber.org/mock/gomock"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
	isgomock struct{}
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// AddPort mocks base method.
func (m *MockAPI) AddPort(ctx context.Context, bridgeName, portName, ifaceType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPort", ctx, bridgeName, portName, ifaceType)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPort indicates an expected call of AddPort.
func (mr *MockAPIMockRecorder) AddPort(ctx, bridgeName, portName, ifaceType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPort", reflect.TypeOf((*MockAPI)(nil).AddPort), ctx, bridgeName, portName, ifaceType)
}

// Cache mocks base method.
func (m *MockAPI) Cache() *cache.TableCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cache")
	ret0, _ := ret[0].(*cache.TableCache)
	return ret0
}

// Cache indicates an expected call of Cache.
func (mr *MockAPIMockRecorder) Cache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cache", reflect.TypeOf((*MockAPI)(nil).Cache))
}

// Close mocks base method.
func (m *MockAPI) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockAPIMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAPI)(nil).Close))
}

// Connect mocks base method.
func (m *MockAPI) Connect(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockAPIMockRecorder) Connect(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockAPI)(nil).Connect), arg0)
}

// Connected mocks base method.
func (m *MockAPI) Connected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Connected indicates an expected call of Connected.
func (mr *MockAPIMockRecorder) Connected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connected", reflect.TypeOf((*MockAPI)(nil).Connected))
}

// Create mocks base method.
func (m *MockAPI) Create(arg0 ...model.Model) ([]ovsdb.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].([]ovsdb.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAPIMockRecorder) Create(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAPI)(nil).Create), arg0...)
}

// CurrentEndpoint mocks base method.
func (m *MockAPI) CurrentEndpoint() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentEndpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

// CurrentEndpoint indicates an expected call of CurrentEndpoint.
func (mr *MockAPIMockRecorder) CurrentEndpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentEndpoint", reflect.TypeOf((*MockAPI)(nil).CurrentEndpoint))
}

// DelPort mocks base method.
func (m *MockAPI) DelPort(ctx context.Context, bridgeName, portName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelPort", ctx, bridgeName, portName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelPort indicates an expected call of DelPort.
func (mr *MockAPIMockRecorder) DelPort(ctx, bridgeName, portName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelPort", reflect.TypeOf((*MockAPI)(nil).DelPort), ctx, bridgeName, portName)
}

// Disconnect mocks base method.
func (m *MockAPI) Disconnect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnect")
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockAPIMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockAPI)(nil).Disconnect))
}

// DisconnectNotify mocks base method.
func (m *MockAPI) DisconnectNotify() chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectNotify")
	ret0, _ := ret[0].(chan struct{})
	return ret0
}

// DisconnectNotify indicates an expected call of DisconnectNotify.
func (mr *MockAPIMockRecorder) DisconnectNotify() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectNotify", reflect.TypeOf((*MockAPI)(nil).DisconnectNotify))
}

// Echo mocks base method.
func (m *MockAPI) Echo(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Echo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Echo indicates an expected call of Echo.
func (mr *MockAPIMockRecorder) Echo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Echo", reflect.TypeOf((*MockAPI)(nil).Echo), arg0)
}

// Get mocks base method.
func (m *MockAPI) Get(arg0 context.Context, arg1 model.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockAPIMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAPI)(nil).Get), arg0, arg1)
}

// IsIfaceInBr mocks base method.
func (m *MockAPI) IsIfaceInBr(ctx context.Context, bridgeName, portName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsIfaceInBr", ctx, bridgeName, portName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsIfaceInBr indicates an expected call of IsIfaceInBr.
func (mr *MockAPIMockRecorder) IsIfaceInBr(ctx, bridgeName, portName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsIfaceInBr", reflect.TypeOf((*MockAPI)(nil).IsIfaceInBr), ctx, bridgeName, portName)
}

// List mocks base method.
func (m *MockAPI) List(ctx context.Context, result any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockAPIMockRecorder) List(ctx, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAPI)(nil).List), ctx, result)
}

// Monitor mocks base method.
func (m *MockAPI) Monitor(arg0 context.Context, arg1 *client.Monitor) (client.MonitorCookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Monitor", arg0, arg1)
	ret0, _ := ret[0].(client.MonitorCookie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Monitor indicates an expected call of Monitor.
func (mr *MockAPIMockRecorder) Monitor(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Monitor", reflect.TypeOf((*MockAPI)(nil).Monitor), arg0, arg1)
}

// MonitorAll mocks base method.
func (m *MockAPI) MonitorAll(arg0 context.Context) (client.MonitorCookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MonitorAll", arg0)
	ret0, _ := ret[0].(client.MonitorCookie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MonitorAll indicates an expected call of MonitorAll.
func (mr *MockAPIMockRecorder) MonitorAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonitorAll", reflect.TypeOf((*MockAPI)(nil).MonitorAll), arg0)
}

// MonitorCancel mocks base method.
func (m *MockAPI) MonitorCancel(ctx context.Context, cookie client.MonitorCookie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MonitorCancel", ctx, cookie)
	ret0, _ := ret[0].(error)
	return ret0
}

// MonitorCancel indicates an expected call of MonitorCancel.
func (mr *MockAPIMockRecorder) MonitorCancel(ctx, cookie any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonitorCancel", reflect.TypeOf((*MockAPI)(nil).MonitorCancel), ctx, cookie)
}

// NewMonitor mocks base method.
func (m *MockAPI) NewMonitor(arg0 ...client.MonitorOption) *client.Monitor {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewMonitor", varargs...)
	ret0, _ := ret[0].(*client.Monitor)
	return ret0
}

// NewMonitor indicates an expected call of NewMonitor.
func (mr *MockAPIMockRecorder) NewMonitor(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMonitor", reflect.TypeOf((*MockAPI)(nil).NewMonitor), arg0...)
}

// Schema mocks base method.
func (m *MockAPI) Schema() ovsdb.DatabaseSchema {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schema")
	ret0, _ := ret[0].(ovsdb.DatabaseSchema)
	return ret0
}

// Schema indicates an expected call of Schema.
func (mr *MockAPIMockRecorder) Schema() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schema", reflect.TypeOf((*MockAPI)(nil).Schema))
}

// SetIfaceExternalIDs mocks base method.
func (m *MockAPI) SetIfaceExternalIDs(ctx context.Context, name string, externalIDs map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIfaceExternalIDs", ctx, name, externalIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetIfaceExternalIDs indicates an expected call of SetIfaceExternalIDs.
func (mr *MockAPIMockRecorder) SetIfaceExternalIDs(ctx, name, externalIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIfaceExternalIDs", reflect.TypeOf((*MockAPI)(nil).SetIfaceExternalIDs), ctx, name, externalIDs)
}

// SetIfaceOptions mocks base method.
func (m *MockAPI) SetIfaceOptions(ctx context.Context, name string, options map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIfaceOptions", ctx, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetIfaceOptions indicates an expected call of SetIfaceOptions.
func (mr *MockAPIMockRecorder) SetIfaceOptions(ctx, name, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIfaceOptions", reflect.TypeOf((*MockAPI)(nil).SetIfaceOptions), ctx, name, options)
}

// SetOption mocks base method.
func (m *MockAPI) SetOption(arg0 client.Option) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOption", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOption indicates an expected call of SetOption.
func (mr *MockAPIMockRecorder) SetOption(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOption", reflect.TypeOf((*MockAPI)(nil).SetOption), arg0)
}

// SetPortExternalIDs mocks base method.
func (m *MockAPI) SetPortExternalIDs(ctx context.Context, name string, externalIDs map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPortExternalIDs", ctx, name, externalIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPortExternalIDs indicates an expected call of SetPortExternalIDs.
func (mr *MockAPIMockRecorder) SetPortExternalIDs(ctx, name, externalIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPortExternalIDs", reflect.TypeOf((*MockAPI)(nil).SetPortExternalIDs), ctx, name, externalIDs)
}

// Transact mocks base method.
func (m *MockAPI) Transact(arg0 context.Context, arg1 ...ovsdb.Operation) ([]ovsdb.OperationResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Transact", varargs...)
	ret0, _ := ret[0].([]ovsdb.OperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transact indicates an expected call of Transact.
func (mr *MockAPIMockRecorder) Transact(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transact", reflect.TypeOf((*MockAPI)(nil).Transact), varargs...)
}

// UpdateEndpoints mocks base method.
func (m *MockAPI) UpdateEndpoints(arg0 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateEndpoints", arg0)
}

// UpdateEndpoints indicates an expected call of UpdateEndpoints.
func (mr *MockAPIMockRecorder) UpdateEndpoints(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEndpoints", reflect.TypeOf((*MockAPI)(nil).UpdateEndpoints), arg0)
}

// Where mocks base method.
func (m *MockAPI) Where(arg0 ...model.Model) client.ConditionalAPI {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(client.ConditionalAPI)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockAPIMockRecorder) Where(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockAPI)(nil).Where), arg0...)
}

// WhereAll mocks base method.
func (m *MockAPI) WhereAll(arg0 model.Model, arg1 ...model.Condition) client.ConditionalAPI {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WhereAll", varargs...)
	ret0, _ := ret[0].(client.ConditionalAPI)
	return ret0
}

// WhereAll indicates an expected call of WhereAll.
func (mr *MockAPIMockRecorder) WhereAll(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereAll", reflect.TypeOf((*MockAPI)(nil).WhereAll), varargs...)
}

// WhereAny mocks base method.
func (m *MockAPI) WhereAny(arg0 model.Model, arg1 ...model.Condition) client.ConditionalAPI {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WhereAny", varargs...)
	ret0, _ := ret[0].(client.ConditionalAPI)
	return ret0
}

// WhereAny indicates an expected call of WhereAny.
func (mr *MockAPIMockRecorder) WhereAny(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereAny", reflect.TypeOf((*MockAPI)(nil).WhereAny), varargs...)
}

// WhereCache mocks base method.
func (m *MockAPI) WhereCache(predicate any) client.ConditionalAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereCache", predicate)
	ret0, _ := ret[0].(client.ConditionalAPI)
	return ret0
}

// WhereCache indicates an expected call of WhereCache.
func (mr *MockAPIMockRecorder) WhereCache(predicate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereCache", reflect.TypeOf((*MockAPI)(nil).WhereCache), predicate)
}
