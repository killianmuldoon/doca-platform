{{range .BFGCFGParams}}{{.}}
{{end}}

bfb_modify_os()
{
mkdir -p /mnt/opt/dpf
cat << \EOF > /mnt/var/lib/cloud/seed/nocloud-net/user-data
#cloud-config
debug:
  verbose: true
users:
  - name: ubuntu
    lock_passwd: False
    groups: adm, audio, cdrom, dialout, dip, floppy, lxd, netdev, plugdev, sudo, video
    sudo: ALL=(ALL) NOPASSWD:ALL
    shell: /bin/bash
{{- if .UbuntuPassword}}
    passwd: {{.UbuntuPassword}}
{{else}}
chpasswd:
  list: |
    ubuntu:ubuntu
  expire: True
{{end}}

write_files:
  - path: /etc/netplan/99-dpf.yaml
    permissions: '0600'
    content: |
        network:
            ethernets:
                enp3s0f0s1000:
                    dhcp4: true
                enp3s0f0s1001:
                    dhcp4: false
                    addresses:
                        - 169.254.55.1/30
            renderer: NetworkManager
            version: 2
  - path: /etc/netplan/50-cloud-init.yaml
    permissions: '0600'
    content: |
        network:
            ethernets:
                oob_net0:
                    dhcp4: false
                tmfifo_net0:
                    addresses:
                    - 192.168.100.2/30
                    dhcp4: false
            renderer: NetworkManager
            version: 2
  - path: /etc/modules-load.d/br_netfilter.conf
    permissions: '0644'
    content: |
        br_netfilter
  - path: /etc/sysctl.conf
    permissions: '0644'
    owner: root:root
    append: true
    content: |
        net.ipv4.ip_forward=1
        net.bridge.bridge-nf-call-iptables=1
        net.bridge.bridge-nf-call-ip6tables=1
  - path: /opt/dpf/configure-host-to-dpu-conn.sh
    permissions: '0755'
    content: |
        #!/bin/bash
        set -ex
        KUBELET_SF_NUM=1000
        OVNK8S_SF_NUM=1001
        PF_TOTAL_SF={{.SF_NUM}}
        CMD=$1
        KUBELET_BR_NAME=br-kubelet-ch
        OVNK8S_BR_NAME=br-ovn-k8s-ch
        KUBELET_REP_HOST=pf0vf1
        OVNK8S_REP_HOST=pf0vf2

        case $CMD in
            setup) ;;
            *)
            echo "invalid first argument. ./configure-host-to-dpu-sf.sh {setup}"
            exit 1
            ;;
        esac

        create_bridge() {
            local br_name=$1

            if [ ! -d "/sys/class/net/${br_name}" ]; then
                ovs-vsctl add-br ${br_name}
            fi
        }

        waiting_for_vf_rep() {
            local br_name=$1
            local rep_dpu=$2

            while true
            do
                if ip link show dev ${rep_dpu} &> /dev/null; then
                    ovs-vsctl add-port ${br_name} ${rep_dpu} || true
                    break
                else
                    echo "${rep_dpu} does not exist, waiting for ${rep_dpu} creation"
                    sleep 5 # Wait for 5 seconds before retrying
                fi
            done
        }

        if [ "$CMD" = "setup" ]; then
            kubelet_rep_dpu="en3f0pf0sf1000"
            ovnk8s_rep_dpu="en3f0pf0sf1001"
            kubeletnetdev="enp3s0f0s1000"
            ovnk8snetdev="enp3s0f0s1001"

            /sbin/mlnx-sf --action create --device 0000:03:00.0 --sfnum 1000
            /sbin/mlnx-sf --action create --device 0000:03:00.0 --sfnum 1001
            sleep 1

            # Create SF on P0 for SFC, reserve 1000 and 1001 for common channel. sf index starts from 1
            for i in $(seq 1 $((PF_TOTAL_SF-2))); do
                /sbin/mlnx-sf --action create --device 0000:03:00.0 --sfnum ${i} || true
            done
            # Create SF on P1 for SFC, sf index starts from 1
            if [ -d "/sys/bus/pci/devices/0000:03:00.1" ]; then
                for i in $(seq 1 $((PF_TOTAL_SF))); do
                    /sbin/mlnx-sf --action create --device 0000:03:00.1 --sfnum ${i} || true
                done
            fi

            create_bridge ${OVNK8S_BR_NAME}
            ovs-vsctl add-port ${OVNK8S_BR_NAME} ${ovnk8s_rep_dpu} || true
            waiting_for_vf_rep ${OVNK8S_BR_NAME} ${OVNK8S_REP_HOST}

            create_bridge ${KUBELET_BR_NAME}
            ovs-vsctl add-port ${KUBELET_BR_NAME} ${kubelet_rep_dpu} || true
            waiting_for_vf_rep ${KUBELET_BR_NAME} ${KUBELET_REP_HOST}

            sleep 1
            # Bring interfaces up
            ip link set ${KUBELET_BR_NAME} up
            ip link set ${OVNK8S_BR_NAME} up
        fi
  - path: /etc/systemd/system/kubelet.service.d/10-bf.conf
    permissions: '0644'
    content: |
        [Service]
        Environment="KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"
        Environment="KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml"
        EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env
        EnvironmentFile=-/etc/default/kubelet
        ExecStart=
        ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS
  - path: /etc/NetworkManager/dispatcher.d/dpf-comm-ch-connectivity
    permissions: '0755'
    content: |
        #!/usr/bin/env bash
        set -euo pipefail

        # This script triggers an ARP REPLY in the broadcast domain of the SF used for the kubelet traffic in order to trigger
        # route creation via parprouted running on the host. Without this, the DPU can't reach any IP, not even the gateway.
        INT_NAME=$1
        ACTION=$2

        # This is the SF that is getting a DHCP IP via the parpouted/dhcrelay/sf-vf-bridge setup
        SF_NAME=enp3s0f0s1000

        if [ "${ACTION}" = "dhcp4-change" ]; then
          if [ "${INT_NAME}" = "${SF_NAME}" ]; then
            echo "Attempting arping for ${INT_NAME}"
            for i in {0..10}; do
              echo "Probing IPs for ${INT_NAME}"
              ip_list=($(ip addr show ${INT_NAME} | grep -oP 'inet \K[\d.]+'))

              if [[ ${#ip_list[@]} -lt 1 ]]; then
                sleep 3
                continue
              fi

              for ip in "${ip_list[@]}"; do
                echo "Starting arping for ${INT_NAME} ${ip}"
                arping -A -I ${INT_NAME} ${ip} -c 3
                echo "Finished arping for ${INT_NAME} ${ip}"
              done
              break
            done
          fi
        fi
  - path: /opt/dpf/join_k8s_cluster.sh
    permissions: '0755'
    content: |
        #!/bin/bash

        # update dynamic IP to kubelet configuration
        while true; do
            if [ -d "/sys/class/net/enp3s0f0s1000" ]; then
                break
            fi
            sleep 5
        done
        while true; do
            ip_list=($(ip addr show enp3s0f0s1000 | grep -oP 'inet \K[\d.]+'))

            if [[ ${#ip_list[@]} -lt 1 ]]; then
                sleep 5
                continue
            fi

            for ip in "${ip_list[@]}"; do
                systemctl enable kubelet
                break
            done
            break
        done

        # already joined cluster
        if [ -e "/opt/dpf/joined_cluster_successfully" ]; then
            # avoid re-join when dpu restart
            echo "/opt/dpf/joined_cluster_successfully already exist, the node should already joined cluster."
            exit 0
        fi


        while true
        do
            {{.KUBEADM_JOIN}} && touch /opt/dpf/joined_cluster_successfully && exit 0
            sleep 5 # Wait for 5 seconds before retrying
            if [ -e "/etc/kubernetes/pki/ca.crt" ]; then
                rm -rf /etc/kubernetes/pki/ca.crt
            fi
            if [ -e "/etc/kubernetes/bootstrap-kubelet.conf" ]; then
                rm -rf /etc/kubernetes/bootstrap-kubelet.conf
            fi
        done
        echo "Failed joining k8s cluster after 30 minutes."
        exit 1
  - path: /etc/systemd/system/kubeadm-join.service
    permissions: '0644'
    content: |
        [Unit]
        Description=Run kubeadm until successful or timeout
        After=network-online.target
        Wants=network-online.target

        [Service]
        Type=simple
        ExecStart=/bin/bash /opt/dpf/join_k8s_cluster.sh


        [Install]
        WantedBy=multi-user.target
  - path: /etc/systemd/system/bootstrap-dpf.service
    permissions: '0644'
    content: |
        [Unit]
        Description=Configure dpu network
        After=network-online.target
        Before=kubelet.service
        Wants=network-online.target

        [Service]
        Type=oneshot
        ExecStart=/bin/bash /opt/dpf/configure-host-to-dpu-conn.sh setup

        [Install]
        WantedBy=multi-user.target
{{- if .NVConfigParams}}
  - path: /opt/dpf/set-nvconfig-params.sh
    permissions: '0755'
    content: |
        #! /bin/bash
        set -e
        for dev in /dev/mst/*; do
          echo "set NVConfig on dev ${dev}"
          mlxconfig -d ${dev} -y set {{.NVConfigParams}}
        done
        echo "Finished setting nvconfig parameters"
{{end}}
{{- if .Sysctl}}
  - path: /etc/sysctl.d/99-dpf.conf
    permissions: '0644'
    content: |
{{- range .Sysctl}}
{{indent 8 .}}{{end}}
{{end}}

{{- if .KernelParameters}}
  - path: /etc/default/grub.d/99-dpf.cfg
    permissions: '0644'
    content: |
        GRUB_CMDLINE_LINUX="{{.KernelParameters}}"
{{end}}

{{- range .ConfigFiles}}
  - path: {{.Path}}
    {{if .IsAppend}}append: true
    {{end -}}
    permissions: {{.Permissions}}
    content: |
{{indent 8 .Content}}
{{end}}

{{- if .OVSRawScript}}
  - path: /opt/dpf/ovs.sh
    permissions: '0755'
    content: |
        #! /bin/bash
        set -e
{{indent 8 .OVSRawScript}}
{{end}}

{{- if or .KernelParameters .Sysctl}}
  - path: /opt/dpf/restart.sh
    permissions: '0755'
    content: |
        #! /bin/bash
        set -e
        update-grub
        reboot
{{end}}

{{- if .ContainerdRegistryEndpoint }}
  - path: /opt/dpf/config_containerd.sh
    permissions: '0755'
    content: |
        #!/bin/bash

        CONFIG_FILE="/etc/containerd/config.toml"

        if [ ! -f "$CONFIG_FILE" ]; then
            exit 1
        fi

        CONTAINERD_VERSION=$(containerd --version | awk '{print $3}' | cut -d '.' -f1,2)

        if [ -z "$CONTAINERD_VERSION" ]; then
            exit 1
        fi

        # Determine the containerd path based on version
        if (( $(echo "$CONTAINERD_VERSION >= 2" | bc -l) )); then
            CONTAINERD_PATH="io.containerd.cri.v1.images"
        else
            CONTAINERD_PATH="io.containerd.grpc.v1.cri"
        fi

        # Function to modify or add tls configuration
        modify_tls() {
            if grep -q '\[plugins\."'"$CONTAINERD_PATH"'"\.registry\.configs\."nvcr.io"\.tls\]' "$CONFIG_FILE"; then
                sed -i '/\[plugins\."'"$CONTAINERD_PATH"'"\.registry\.configs\."nvcr.io"\.tls\]/,+1 s/insecure_skip_verify = .*/insecure_skip_verify = true/' "$CONFIG_FILE"
            else
                sed -i '/^[[:space:]]*#[[:space:]]*\[plugins\."'"$CONTAINERD_PATH"'"\.registry\.configs\]/s/^[[:space:]]*#//; /\[plugins\."'"$CONTAINERD_PATH"'"\.registry\.configs\]/a \ \ \ \ \ \ \ \ \[plugins\."'"$CONTAINERD_PATH"'"\.registry\.configs\."nvcr.io"\.tls\]\n\ \ \ \ \ \ \ \ \ \ insecure_skip_verify = true' "$CONFIG_FILE"
            fi
        }

        # Function to modify or add mirrors configuration
        modify_mirrors() {
            if grep -q '\[plugins\."'"$CONTAINERD_PATH"'"\.registry\.mirrors\."nvcr.io"\]' "$CONFIG_FILE"; then
                sed -i '/\[plugins\."'"$CONTAINERD_PATH"'"\.registry\.mirrors\."nvcr.io"\]/,+1 s|endpoint = .*|endpoint = [\"{{ .ContainerdRegistryEndpoint }}\"]|' "$CONFIG_FILE"
            else
                sed -i '/\[plugins\."'"$CONTAINERD_PATH"'"\.registry\.mirrors\]/a \ \ \ \ \ \ \ \ \[plugins\."'"$CONTAINERD_PATH"'"\.registry\.mirrors\."nvcr.io"\]\n\ \ \ \ \ \ \ \ \ \ endpoint = [\"{{ .ContainerdRegistryEndpoint }}\"]' "$CONFIG_FILE"
            fi
        }

        modify_tls

        modify_mirrors
{{ end }}

runcmd:
  - [ hostnamectl, set-hostname, {{.HOSTNAME}} ]
  - [ modprobe, br_netfilter ]
  - [ sysctl, -p ]
  - [ systemctl, stop, kubelet ]
  - [ systemctl, daemon-reload ]
  - [ systemctl, enable, containerd ]
  - [ systemctl, start, containerd ]
  - [ systemctl, enable, bootstrap-dpf.service ]
  - [ systemctl, enable, kubeadm-join.service ]
{{- if .NVConfigParams}}
  - [ /opt/dpf/set-nvconfig-params.sh ]{{end}}
{{- if .OVSRawScript}}
  - [ /opt/dpf/ovs.sh ]{{end}}
{{- if .ContainerdRegistryEndpoint}}
  - [ /opt/dpf/config_containerd.sh ]
  - [ systemctl, restart, containerd ]{{end}}
{{- if or .KernelParameters .Sysctl}}
  - [ /opt/dpf/restart.sh]{{end}}
EOF
}
