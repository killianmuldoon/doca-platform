/*
COPYRIGHT 2024 NVIDIA

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by "libovsdb.modelgen"
// DO NOT EDIT.

package ovsmodel

const ControllerTable = "Controller"

type (
	ControllerConnectionMode = string
	ControllerRole           = string
	ControllerType           = string
)

var (
	ControllerConnectionModeInBand    ControllerConnectionMode = "in-band"
	ControllerConnectionModeOutOfBand ControllerConnectionMode = "out-of-band"
	ControllerRoleMaster              ControllerRole           = "master"
	ControllerRoleOther               ControllerRole           = "other"
	ControllerRoleSlave               ControllerRole           = "slave"
	ControllerTypePrimary             ControllerType           = "primary"
	ControllerTypeService             ControllerType           = "service"
)

// Controller defines an object in Controller table
type Controller struct {
	UUID                 string                    `ovsdb:"_uuid"`
	ConnectionMode       *ControllerConnectionMode `ovsdb:"connection_mode"`
	ControllerBurstLimit *int                      `ovsdb:"controller_burst_limit"`
	ControllerQueueSize  *int                      `ovsdb:"controller_queue_size"`
	ControllerRateLimit  *int                      `ovsdb:"controller_rate_limit"`
	EnableAsyncMessages  *bool                     `ovsdb:"enable_async_messages"`
	ExternalIDs          map[string]string         `ovsdb:"external_ids"`
	InactivityProbe      *int                      `ovsdb:"inactivity_probe"`
	IsConnected          bool                      `ovsdb:"is_connected"`
	LocalGateway         *string                   `ovsdb:"local_gateway"`
	LocalIP              *string                   `ovsdb:"local_ip"`
	LocalNetmask         *string                   `ovsdb:"local_netmask"`
	MaxBackoff           *int                      `ovsdb:"max_backoff"`
	OtherConfig          map[string]string         `ovsdb:"other_config"`
	Role                 *ControllerRole           `ovsdb:"role"`
	Status               map[string]string         `ovsdb:"status"`
	Target               string                    `ovsdb:"target"`
	Type                 *ControllerType           `ovsdb:"type"`
}
