// /*
// Copyright 2024 NVIDIA.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

// Code generated by MockGen. DO NOT EDIT.
// Source: antrea.io/antrea/pkg/ovs/openflow (interfaces: Bridge)
//
// Generated by this command:
//
//	mockgen -copyright_file ../../../hack/boilerplate.go.txt --build_flags=--mod=mod -package controller -destination mock_openflow_bridge.go antrea.io/antrea/pkg/ovs/openflow Bridge
//

// Package controller is a generated GoMock package.
package controller

import (
	reflect "reflect"

	openflow "antrea.io/antrea/pkg/ovs/openflow"
	openflow15 "antrea.io/libOpenflow/openflow15"
	ofctrl "antrea.io/ofnet/ofctrl"
	gomock "go.uber.org/mock/gomock"
)

// MockBridge is a mock of Bridge interface.
type MockBridge struct {
	ctrl     *gomock.Controller
	recorder *MockBridgeMockRecorder
	isgomock struct{}
}

// MockBridgeMockRecorder is the mock recorder for MockBridge.
type MockBridgeMockRecorder struct {
	mock *MockBridge
}

// NewMockBridge creates a new mock instance.
func NewMockBridge(ctrl *gomock.Controller) *MockBridge {
	mock := &MockBridge{ctrl: ctrl}
	mock.recorder = &MockBridgeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBridge) EXPECT() *MockBridgeMockRecorder {
	return m.recorder
}

// AddFlowsInBundle mocks base method.
func (m *MockBridge) AddFlowsInBundle(addflows, modFlows, delFlows []*openflow15.FlowMod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFlowsInBundle", addflows, modFlows, delFlows)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFlowsInBundle indicates an expected call of AddFlowsInBundle.
func (mr *MockBridgeMockRecorder) AddFlowsInBundle(addflows, modFlows, delFlows any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFlowsInBundle", reflect.TypeOf((*MockBridge)(nil).AddFlowsInBundle), addflows, modFlows, delFlows)
}

// AddOFEntriesInBundle mocks base method.
func (m *MockBridge) AddOFEntriesInBundle(addEntries, modEntries, delEntries []openflow.OFEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOFEntriesInBundle", addEntries, modEntries, delEntries)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOFEntriesInBundle indicates an expected call of AddOFEntriesInBundle.
func (mr *MockBridgeMockRecorder) AddOFEntriesInBundle(addEntries, modEntries, delEntries any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOFEntriesInBundle", reflect.TypeOf((*MockBridge)(nil).AddOFEntriesInBundle), addEntries, modEntries, delEntries)
}

// BuildPacketOut mocks base method.
func (m *MockBridge) BuildPacketOut() openflow.PacketOutBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildPacketOut")
	ret0, _ := ret[0].(openflow.PacketOutBuilder)
	return ret0
}

// BuildPacketOut indicates an expected call of BuildPacketOut.
func (mr *MockBridgeMockRecorder) BuildPacketOut() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildPacketOut", reflect.TypeOf((*MockBridge)(nil).BuildPacketOut))
}

// Connect mocks base method.
func (m *MockBridge) Connect(maxRetrySec int, connectCh chan struct{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", maxRetrySec, connectCh)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockBridgeMockRecorder) Connect(maxRetrySec, connectCh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockBridge)(nil).Connect), maxRetrySec, connectCh)
}

// DeleteFlowsByCookie mocks base method.
func (m *MockBridge) DeleteFlowsByCookie(cookieID, cookieMask uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFlowsByCookie", cookieID, cookieMask)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFlowsByCookie indicates an expected call of DeleteFlowsByCookie.
func (mr *MockBridgeMockRecorder) DeleteFlowsByCookie(cookieID, cookieMask any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlowsByCookie", reflect.TypeOf((*MockBridge)(nil).DeleteFlowsByCookie), cookieID, cookieMask)
}

// DeleteGroupAll mocks base method.
func (m *MockBridge) DeleteGroupAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroupAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroupAll indicates an expected call of DeleteGroupAll.
func (mr *MockBridgeMockRecorder) DeleteGroupAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupAll", reflect.TypeOf((*MockBridge)(nil).DeleteGroupAll))
}

// DeleteMeterAll mocks base method.
func (m *MockBridge) DeleteMeterAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMeterAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMeterAll indicates an expected call of DeleteMeterAll.
func (mr *MockBridgeMockRecorder) DeleteMeterAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMeterAll", reflect.TypeOf((*MockBridge)(nil).DeleteMeterAll))
}

// Disconnect mocks base method.
func (m *MockBridge) Disconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockBridgeMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockBridge)(nil).Disconnect))
}

// DumpFlows mocks base method.
func (m *MockBridge) DumpFlows(cookieID, cookieMask uint64) (map[uint64]*openflow.FlowStates, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpFlows", cookieID, cookieMask)
	ret0, _ := ret[0].(map[uint64]*openflow.FlowStates)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DumpFlows indicates an expected call of DumpFlows.
func (mr *MockBridgeMockRecorder) DumpFlows(cookieID, cookieMask any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpFlows", reflect.TypeOf((*MockBridge)(nil).DumpFlows), cookieID, cookieMask)
}

// DumpTableStatus mocks base method.
func (m *MockBridge) DumpTableStatus() []openflow.TableStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpTableStatus")
	ret0, _ := ret[0].([]openflow.TableStatus)
	return ret0
}

// DumpTableStatus indicates an expected call of DumpTableStatus.
func (mr *MockBridgeMockRecorder) DumpTableStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpTableStatus", reflect.TypeOf((*MockBridge)(nil).DumpTableStatus))
}

// GetMeterStats mocks base method.
func (m *MockBridge) GetMeterStats(handleMeterStatsReply func(int, int64)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeterStats", handleMeterStatsReply)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetMeterStats indicates an expected call of GetMeterStats.
func (mr *MockBridgeMockRecorder) GetMeterStats(handleMeterStatsReply any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeterStats", reflect.TypeOf((*MockBridge)(nil).GetMeterStats), handleMeterStatsReply)
}

// GetTableByID mocks base method.
func (m *MockBridge) GetTableByID(id uint8) (openflow.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableByID", id)
	ret0, _ := ret[0].(openflow.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableByID indicates an expected call of GetTableByID.
func (mr *MockBridgeMockRecorder) GetTableByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableByID", reflect.TypeOf((*MockBridge)(nil).GetTableByID), id)
}

// IsConnected mocks base method.
func (m *MockBridge) IsConnected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnected indicates an expected call of IsConnected.
func (mr *MockBridgeMockRecorder) IsConnected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnected", reflect.TypeOf((*MockBridge)(nil).IsConnected))
}

// NewGroup mocks base method.
func (m *MockBridge) NewGroup(id openflow.GroupIDType) openflow.Group {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewGroup", id)
	ret0, _ := ret[0].(openflow.Group)
	return ret0
}

// NewGroup indicates an expected call of NewGroup.
func (mr *MockBridgeMockRecorder) NewGroup(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewGroup", reflect.TypeOf((*MockBridge)(nil).NewGroup), id)
}

// NewGroupTypeAll mocks base method.
func (m *MockBridge) NewGroupTypeAll(id openflow.GroupIDType) openflow.Group {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewGroupTypeAll", id)
	ret0, _ := ret[0].(openflow.Group)
	return ret0
}

// NewGroupTypeAll indicates an expected call of NewGroupTypeAll.
func (mr *MockBridgeMockRecorder) NewGroupTypeAll(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewGroupTypeAll", reflect.TypeOf((*MockBridge)(nil).NewGroupTypeAll), id)
}

// NewMeter mocks base method.
func (m *MockBridge) NewMeter(id openflow.MeterIDType, flags ofctrl.MeterFlag) openflow.Meter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMeter", id, flags)
	ret0, _ := ret[0].(openflow.Meter)
	return ret0
}

// NewMeter indicates an expected call of NewMeter.
func (mr *MockBridgeMockRecorder) NewMeter(id, flags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMeter", reflect.TypeOf((*MockBridge)(nil).NewMeter), id, flags)
}

// NewTable mocks base method.
func (m *MockBridge) NewTable(table openflow.Table, next uint8, missAction openflow.MissActionType) openflow.Table {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTable", table, next, missAction)
	ret0, _ := ret[0].(openflow.Table)
	return ret0
}

// NewTable indicates an expected call of NewTable.
func (mr *MockBridgeMockRecorder) NewTable(table, next, missAction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTable", reflect.TypeOf((*MockBridge)(nil).NewTable), table, next, missAction)
}

// ResumePacket mocks base method.
func (m *MockBridge) ResumePacket(packetIn *ofctrl.PacketIn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumePacket", packetIn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResumePacket indicates an expected call of ResumePacket.
func (mr *MockBridgeMockRecorder) ResumePacket(packetIn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumePacket", reflect.TypeOf((*MockBridge)(nil).ResumePacket), packetIn)
}

// SendPacketOut mocks base method.
func (m *MockBridge) SendPacketOut(packetOut *ofctrl.PacketOut) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPacketOut", packetOut)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPacketOut indicates an expected call of SendPacketOut.
func (mr *MockBridgeMockRecorder) SendPacketOut(packetOut any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPacketOut", reflect.TypeOf((*MockBridge)(nil).SendPacketOut), packetOut)
}

// SubscribePacketIn mocks base method.
func (m *MockBridge) SubscribePacketIn(category uint8, pktInQueue *openflow.PacketInQueue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribePacketIn", category, pktInQueue)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribePacketIn indicates an expected call of SubscribePacketIn.
func (mr *MockBridgeMockRecorder) SubscribePacketIn(category, pktInQueue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribePacketIn", reflect.TypeOf((*MockBridge)(nil).SubscribePacketIn), category, pktInQueue)
}
