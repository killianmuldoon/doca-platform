// /*
// Copyright 2024 NVIDIA.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

// Code generated by MockGen. DO NOT EDIT.
// Source: mountlib.go
//
// Generated by this command:
//
//	mockgen -copyright_file ../../../../../hack/boilerplate.go.txt -destination mock/PkgWrapper.go -source mountlib.go
//

// Package mock_mountlib is a generated GoMock package.
package mock_mountlib

import (
	reflect "reflect"

	mountlib "github.com/nvidia/doca-platform/internal/storage/csi-plugin/wrappers/mountlib"
	gomock "go.uber.org/mock/gomock"
)

// MockPkgWrapper is a mock of PkgWrapper interface.
type MockPkgWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockPkgWrapperMockRecorder
	isgomock struct{}
}

// MockPkgWrapperMockRecorder is the mock recorder for MockPkgWrapper.
type MockPkgWrapperMockRecorder struct {
	mock *MockPkgWrapper
}

// NewMockPkgWrapper creates a new mock instance.
func NewMockPkgWrapper(ctrl *gomock.Controller) *MockPkgWrapper {
	mock := &MockPkgWrapper{ctrl: ctrl}
	mock.recorder = &MockPkgWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPkgWrapper) EXPECT() *MockPkgWrapperMockRecorder {
	return m.recorder
}

// FormatAndMount mocks base method.
func (m *MockPkgWrapper) FormatAndMount(source, target, fstype string, options []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatAndMount", source, target, fstype, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// FormatAndMount indicates an expected call of FormatAndMount.
func (mr *MockPkgWrapperMockRecorder) FormatAndMount(source, target, fstype, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatAndMount", reflect.TypeOf((*MockPkgWrapper)(nil).FormatAndMount), source, target, fstype, options)
}

// IsCorruptedMnt mocks base method.
func (m *MockPkgWrapper) IsCorruptedMnt(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCorruptedMnt", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCorruptedMnt indicates an expected call of IsCorruptedMnt.
func (mr *MockPkgWrapperMockRecorder) IsCorruptedMnt(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCorruptedMnt", reflect.TypeOf((*MockPkgWrapper)(nil).IsCorruptedMnt), err)
}

// Mount mocks base method.
func (m *MockPkgWrapper) Mount(source, target, fstype string, options []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mount", source, target, fstype, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mount indicates an expected call of Mount.
func (mr *MockPkgWrapperMockRecorder) Mount(source, target, fstype, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mount", reflect.TypeOf((*MockPkgWrapper)(nil).Mount), source, target, fstype, options)
}

// ParseMountInfo mocks base method.
func (m *MockPkgWrapper) ParseMountInfo(filename string) ([]mountlib.MountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseMountInfo", filename)
	ret0, _ := ret[0].([]mountlib.MountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseMountInfo indicates an expected call of ParseMountInfo.
func (mr *MockPkgWrapperMockRecorder) ParseMountInfo(filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseMountInfo", reflect.TypeOf((*MockPkgWrapper)(nil).ParseMountInfo), filename)
}

// PathExists mocks base method.
func (m *MockPkgWrapper) PathExists(path string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PathExists", path)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PathExists indicates an expected call of PathExists.
func (mr *MockPkgWrapperMockRecorder) PathExists(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PathExists", reflect.TypeOf((*MockPkgWrapper)(nil).PathExists), path)
}

// Unmount mocks base method.
func (m *MockPkgWrapper) Unmount(target string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmount", target)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmount indicates an expected call of Unmount.
func (mr *MockPkgWrapperMockRecorder) Unmount(target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmount", reflect.TypeOf((*MockPkgWrapper)(nil).Unmount), target)
}
