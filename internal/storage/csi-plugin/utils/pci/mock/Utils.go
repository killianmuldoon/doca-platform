// /*
// Copyright 2024 NVIDIA.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

// Code generated by MockGen. DO NOT EDIT.
// Source: pci.go
//
// Generated by this command:
//
//	mockgen -copyright_file ../../../../../hack/boilerplate.go.txt -destination mock/Utils.go -source pci.go
//

// Package mock_pci is a generated GoMock package.
package mock_pci

import (
	context "context"
	reflect "reflect"

	pci "github.com/nvidia/doca-platform/internal/storage/csi-plugin/utils/pci"
	gomock "go.uber.org/mock/gomock"
)

// MockUtils is a mock of Utils interface.
type MockUtils struct {
	ctrl     *gomock.Controller
	recorder *MockUtilsMockRecorder
	isgomock struct{}
}

// MockUtilsMockRecorder is the mock recorder for MockUtils.
type MockUtilsMockRecorder struct {
	mock *MockUtils
}

// NewMockUtils creates a new mock instance.
func NewMockUtils(ctrl *gomock.Controller) *MockUtils {
	mock := &MockUtils{ctrl: ctrl}
	mock.recorder = &MockUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUtils) EXPECT() *MockUtilsMockRecorder {
	return m.recorder
}

// DisableSriovVfsDriverAutoprobe mocks base method.
func (m *MockUtils) DisableSriovVfsDriverAutoprobe(pciAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableSriovVfsDriverAutoprobe", pciAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableSriovVfsDriverAutoprobe indicates an expected call of DisableSriovVfsDriverAutoprobe.
func (mr *MockUtilsMockRecorder) DisableSriovVfsDriverAutoprobe(pciAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableSriovVfsDriverAutoprobe", reflect.TypeOf((*MockUtils)(nil).DisableSriovVfsDriverAutoprobe), pciAddress)
}

// GetPFs mocks base method.
func (m *MockUtils) GetPFs(vendor string, deviceIDs []string) ([]pci.DeviceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPFs", vendor, deviceIDs)
	ret0, _ := ret[0].([]pci.DeviceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPFs indicates an expected call of GetPFs.
func (mr *MockUtilsMockRecorder) GetPFs(vendor, deviceIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPFs", reflect.TypeOf((*MockUtils)(nil).GetPFs), vendor, deviceIDs)
}

// GetSRIOVNumVFs mocks base method.
func (m *MockUtils) GetSRIOVNumVFs(pciAddress string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSRIOVNumVFs", pciAddress)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSRIOVNumVFs indicates an expected call of GetSRIOVNumVFs.
func (mr *MockUtilsMockRecorder) GetSRIOVNumVFs(pciAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSRIOVNumVFs", reflect.TypeOf((*MockUtils)(nil).GetSRIOVNumVFs), pciAddress)
}

// GetSRIOVTotalVFs mocks base method.
func (m *MockUtils) GetSRIOVTotalVFs(pciAddress string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSRIOVTotalVFs", pciAddress)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSRIOVTotalVFs indicates an expected call of GetSRIOVTotalVFs.
func (mr *MockUtilsMockRecorder) GetSRIOVTotalVFs(pciAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSRIOVTotalVFs", reflect.TypeOf((*MockUtils)(nil).GetSRIOVTotalVFs), pciAddress)
}

// InsertKernelModule mocks base method.
func (m *MockUtils) InsertKernelModule(ctx context.Context, module string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertKernelModule", ctx, module)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertKernelModule indicates an expected call of InsertKernelModule.
func (mr *MockUtilsMockRecorder) InsertKernelModule(ctx, module any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertKernelModule", reflect.TypeOf((*MockUtils)(nil).InsertKernelModule), ctx, module)
}

// LoadDriver mocks base method.
func (m *MockUtils) LoadDriver(pciAddress, driver string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadDriver", pciAddress, driver)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadDriver indicates an expected call of LoadDriver.
func (mr *MockUtilsMockRecorder) LoadDriver(pciAddress, driver any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadDriver", reflect.TypeOf((*MockUtils)(nil).LoadDriver), pciAddress, driver)
}

// SetSriovNumVfs mocks base method.
func (m *MockUtils) SetSriovNumVfs(pciAddress string, count int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSriovNumVfs", pciAddress, count)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSriovNumVfs indicates an expected call of SetSriovNumVfs.
func (mr *MockUtilsMockRecorder) SetSriovNumVfs(pciAddress, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSriovNumVfs", reflect.TypeOf((*MockUtils)(nil).SetSriovNumVfs), pciAddress, count)
}
