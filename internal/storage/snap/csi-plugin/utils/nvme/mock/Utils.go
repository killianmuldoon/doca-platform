// /*
// Copyright 2024 NVIDIA.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

// Code generated by MockGen. DO NOT EDIT.
// Source: nvme.go
//
// Generated by this command:
//
//	mockgen -copyright_file ../../../../../../hack/boilerplate.go.txt -destination mock/Utils.go -source nvme.go
//

// Package mock_nvme is a generated GoMock package.
package mock_nvme

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUtils is a mock of Utils interface.
type MockUtils struct {
	ctrl     *gomock.Controller
	recorder *MockUtilsMockRecorder
	isgomock struct{}
}

// MockUtilsMockRecorder is the mock recorder for MockUtils.
type MockUtilsMockRecorder struct {
	mock *MockUtils
}

// NewMockUtils creates a new mock instance.
func NewMockUtils(ctrl *gomock.Controller) *MockUtils {
	mock := &MockUtils{ctrl: ctrl}
	mock.recorder = &MockUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUtils) EXPECT() *MockUtilsMockRecorder {
	return m.recorder
}

// GetBlockDeviceNameForNS mocks base method.
func (m *MockUtils) GetBlockDeviceNameForNS(address string, namespace int32) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockDeviceNameForNS", address, namespace)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockDeviceNameForNS indicates an expected call of GetBlockDeviceNameForNS.
func (mr *MockUtilsMockRecorder) GetBlockDeviceNameForNS(address, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockDeviceNameForNS", reflect.TypeOf((*MockUtils)(nil).GetBlockDeviceNameForNS), address, namespace)
}
