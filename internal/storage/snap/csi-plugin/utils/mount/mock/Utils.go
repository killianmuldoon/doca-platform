// /*
// Copyright 2024 NVIDIA.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

// Code generated by MockGen. DO NOT EDIT.
// Source: mount.go
//
// Generated by this command:
//
//	mockgen -copyright_file ../../../../../../hack/boilerplate.go.txt -destination mock/Utils.go -source mount.go
//

// Package mock_mount is a generated GoMock package.
package mock_mount

import (
	os "os"
	reflect "reflect"

	mountlib "github.com/nvidia/doca-platform/internal/storage/snap/csi-plugin/wrappers/mountlib"
	gomock "go.uber.org/mock/gomock"
)

// MockUtils is a mock of Utils interface.
type MockUtils struct {
	ctrl     *gomock.Controller
	recorder *MockUtilsMockRecorder
	isgomock struct{}
}

// MockUtilsMockRecorder is the mock recorder for MockUtils.
type MockUtilsMockRecorder struct {
	mock *MockUtils
}

// NewMockUtils creates a new mock instance.
func NewMockUtils(ctrl *gomock.Controller) *MockUtils {
	mock := &MockUtils{ctrl: ctrl}
	mock.recorder = &MockUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUtils) EXPECT() *MockUtilsMockRecorder {
	return m.recorder
}

// CheckMountExists mocks base method.
func (m *MockUtils) CheckMountExists(src, mountPoint string) (bool, mountlib.MountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckMountExists", src, mountPoint)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(mountlib.MountInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckMountExists indicates an expected call of CheckMountExists.
func (mr *MockUtilsMockRecorder) CheckMountExists(src, mountPoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckMountExists", reflect.TypeOf((*MockUtils)(nil).CheckMountExists), src, mountPoint)
}

// EnsureFileExist mocks base method.
func (m *MockUtils) EnsureFileExist(path string, mode os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureFileExist", path, mode)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureFileExist indicates an expected call of EnsureFileExist.
func (mr *MockUtilsMockRecorder) EnsureFileExist(path, mode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureFileExist", reflect.TypeOf((*MockUtils)(nil).EnsureFileExist), path, mode)
}

// Mount mocks base method.
func (m *MockUtils) Mount(source, target, fstype string, options []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mount", source, target, fstype, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mount indicates an expected call of Mount.
func (mr *MockUtilsMockRecorder) Mount(source, target, fstype, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mount", reflect.TypeOf((*MockUtils)(nil).Mount), source, target, fstype, options)
}

// UnmountAndRemove mocks base method.
func (m *MockUtils) UnmountAndRemove(target string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmountAndRemove", target)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmountAndRemove indicates an expected call of UnmountAndRemove.
func (mr *MockUtilsMockRecorder) UnmountAndRemove(target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmountAndRemove", reflect.TypeOf((*MockUtils)(nil).UnmountAndRemove), target)
}
