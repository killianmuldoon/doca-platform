image: golang:1.22

workflow:
  # This variable can be defined where the job is triggered. e.g. the pipeline schedule in the gitlab UI
  name: $CI_PIPELINE_NAME

variables:
  ## Enable timestamps in job logs. See https://docs.gitlab.com/ee/ci/yaml/ci_job_log_timestamps.html
  FF_TIMESTAMPS: true
  ## This is a read-only token used for pulling repositories. Defined in the DPF operator CI/CD settings.
  GITLAB_TOKEN: $CI_TOKEN
  ## This is a read only token for reading from the Gitlab API. Used for triage and slack notification scripts.
  GITLAB_API_TOKEN: $API_READ_TOKEN
  ## This variable can be overridden to false for specific e2e jobs which will leave the environment intact on job failure for investigation.
  ## Note this does not prevent another job from starting on the same setup so it's recommended to pause the associated gitlab runner if debugging e2e test in this way.
  E2E_ENV_CLEANUP: "true"

stages:
  - verify
  - test
  - build
  - triage

lint:
  stage: verify
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  variables:
    GOLANGCI_LINT_CACHE: $CI_PROJECT_DIR/.golangci-cache
    GOPATH: $CI_PROJECT_DIR/.gocache # avoid refetching all the packages golangci-lint requires
    # TODO: Remove this one when bug upstream is fixed. golangci-lint should not rely on GOCACHE and instead use
    # GOLANGCI_LINT_CACHE for all of its caching.
    GOCACHE: $CI_PROJECT_DIR/.gocache/go-build # avoid rebuilding all the artifacts golangci-lint requires
  cache:
    key: lint
    untracked: true
    when: always
    paths:
      - hack/tools/bin
      - .gocache
      - .golangci-cache
  before_script:
    # Create the directory which is used to cache golangci-lint results.
    # Added to .gitignore.
    - mkdir -p .golangci-cache
    # Create the directory which will be used as the gocache.
    # Added to .gitignore.
    # Required by golangci-lint to cache go mods
    - mkdir -p .gocache
  script:
    - make lint
    - make lint-helm

verify:
  stage: verify
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  variables:
    BASE_REV: $CI_MERGE_REQUEST_DIFF_BASE_SHA # Used by the verify-copyright target
    COMPARISON_REV: $CI_COMMIT_SHA # Used by the verify-copyright target
    GOPATH: $CI_PROJECT_DIR/.gocache
  cache:
    key: verify
    untracked: true
    when: always
    paths:
      - hack/tools/bin
      - hack/repos
      - .gocache
  before_script:
    # Create the directory which will be used as the gocache.
    # Added to .gitignore.
    - mkdir -p .gocache
  script:
    -  make verify-generate verify-copyright
  after_script:
    - git diff

test:
  stage: test
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == "schedule" && $UNIT_TEST == "true"
  variables:
    GOPATH: $CI_PROJECT_DIR/.gocache
  cache:
    key: test
    untracked: true
    when: always
    paths:
      - hack/tools/bin
      - .gocache
  artifacts:
    when: always
    paths:
      - junit.xml
    reports:
      junit: junit.xml
  before_script:
    # Create the directory which will be used as the gocache.
    # Added to .gitignore.
    - mkdir -p .gocache
  script:
    - make test-report

e2e:
  stage: test
  needs: [ ]
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "schedule" && $E2E_TEST == "true"
      when: always
  variables:
    # The helm bundles and operator-sdk require a remote repository in the e2e environment.
    REGISTRY: gitlab-master.nvidia.com:5005/doca-platform-foundation/dpf-operator/e2e
    IMAGE_PULL_KEY: $GITLAB_REGISTRY_TOKEN
    # Flannel chosen here as it is not hosted on docker hub helping avoid rate limits.
    MINIKUBE_CNI: flannel
    MINIKUBE_DRIVER: docker
    ARTIFACTS: $CI_PROJECT_DIR/artifacts
    TAG: v0.0.0-$CI_COMMIT_SHORT_SHA-test
  tags:
    - e2e
  cache:
    key: e2e
    untracked: true
    when: always
    paths:
      - hack/tools/bin
      - hack/repos
  artifacts:
    when: always
    paths:
      - artifacts/*
  before_script:
    # artifacts are not correctly delete when gitlab restarts jobs.
    - rm -rf artifacts
    - make clean-test-env generate test-env-e2e || go run hack/tools/resource-collector/main.go --kubeconfig ~/.kube/config  --artifactsDirectory $ARTIFACTS
  script:
    # If make-deploy-operator fails run the log collector to see the state of the cluster. This is the same log collector that runs during failing tests.
    - make test-deploy-operator-kustomize || go run hack/tools/resource-collector/main.go --kubeconfig ~/.kube/config  --artifactsDirectory $ARTIFACTS
    - make test-e2e
  after_script:
    - ./hack/scripts/slack-notification.sh
    - make test-cache-images
    - if [ "$E2E_ENV_CLEANUP" == "true" ]; then make clean-test-env; fi

nightly-release:
  stage: build
  needs: [ ]
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: manual
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "schedule" && $NIGHTLY_RELEASE == "true"
      when: always
  variables:
    TAG: v0.0.0-nightly-$CI_COMMIT_SHORT_SHA
    REGISTRY: gitlab-master.nvidia.com:5005/doca-platform-foundation/dpf-operator/e2e
  tags:
    - release
  script:
    - ./hack/scripts/mirror-packages-to-gitlab.sh
    - timeout 30m make release
  after_script:
    - ./hack/scripts/slack-notification.sh

ci-release:
  stage: build
  needs: [ ]
  rules:
    - if: $CI_PIPELINE_SOURCE == 'push' && $CI_COMMIT_BRANCH == "main"
  variables:
    # Note: Variables are also defined under https://gitlab-master.nvidia.com/doca-platform-foundation/dpf-operator/-/pipeline_schedules
    TAG: v0.0.0-$CI_COMMIT_SHORT_SHA
    REGISTRY: nvcr.io/nvstaging/mellanox
    CI_PIPELINE_NAME: "CI release"
    HELM_PUSH_CMD: cm-push
    ## \$$$$oauthtoken resolves to the correct username $oauthtoken after being plumbed through GitLab, env, make and shell.
    HELM_PUSH_OPTS: --username="\$$$$oauthtoken" --password=$NGC_API_KEY -f
    HELM_REGISTRY: https://helm.ngc.nvidia.com/nvstaging/mellanox
  tags:
    - release
  script:
    - ./hack/scripts/mirror-packages-to-gitlab.sh
    - timeout 30m make release
  after_script:
    - ./hack/scripts/slack-notification.sh

triage:
  stage: triage
  needs: []
  variables:
    # This is the name of the pipeline being triaged. Must match the name of the pipeline in Gitlab.
    TRIAGE_PIPELINE_NAME: "Periodic unit test"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $TRIAGE_E2E == "true"
      when: always
  image: registry.gitlab.com/gitlab-ci-utils/curl-jq:2.0.0
  script:
    - ./hack/scripts/periodic_test_triage.sh
