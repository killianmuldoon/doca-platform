image: golang:1.22.1

workflow:
  # This variable can be defined where the job is triggered. e.g. the pipeline schedule in the gitlab UI
  name: $CI_PIPELINE_NAME

variables:
  ## This is a read-only token used for pulling repositories. Defined in the DPF operator CI/CD settings.
  GITLAB_TOKEN: $CI_TOKEN
  GITLAB_API_TOKEN: $API_READ_TOKEN

stages:
  - verify
  - test
  - build
  - triage

lint:
  stage: verify
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  script:
    - make lint
    - make lint-helm

verify:
  stage: verify
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  variables:
    BASE_REV: $CI_MERGE_REQUEST_DIFF_BASE_SHA # Used by the verify-copyright target
    COMPARISON_REV: $CI_COMMIT_SHA # Used by the verify-copyright target
  script:
    -  make verify-generate verify-copyright
  after_script:
    - git diff

nightly-release:
  stage: build
  needs: [ ]
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: manual
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "schedule" && $NIGHTLY_RELEASE == "true"
      when: always
  variables:
    TAG: v0.0.0-nightly
    REGISTRY: harbor.mellanox.com/cloud-orchestration-dev/dpf
  tags:
    - release
  before_script:
    - docker login harbor.mellanox.com
  script:
    - make generate docker-build-all docker-push-all
  after_script:
    - ./hack/scripts/slack-notification.sh

test:
  stage: test
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == "schedule" && $UNIT_TEST == "true"
  script:
    - make test-report
  artifacts:
    when: always
    paths:
      - junit.xml
    reports:
      junit: junit.xml

e2e:
  stage: test
  needs: [ ]
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: manual
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "schedule" && $E2E_TEST == "true"
      when: always
  variables:
    # The helm bundles and operator-sdk require a remote repository in the e2e environment.
    REGISTRY: harbor.mellanox.com/cloud-orchestration-dev/dpf/e2e
    # Flannel chosen here as it is not hosted on docker hub helping avoid rate limits.
    MINIKUBE_CNI: flannel
    MINIKUBE_DRIVER: docker
  tags:
    - e2e
  cache:
    untracked: true
    paths:
      - hack/tools/bin
      - hack/repos
  artifacts:
    when: always
    paths:
      - artifacts/*
  before_script:
    - make clean-test-env generate test-env-e2e
  script:
    # If make-deploy-operator fails run the log collector to see the state of the cluster. This is the same log collector that runs during failing tests.
    - make test-deploy-operator || go run hack/tools/resource-collector/main.go --kubeconfig ~/.kube/config  --artifactsDirectory $CI_PROJECT_DIR/artifacts
    - make test-e2e
  after_script:
    - ./hack/scripts/slack-notification.sh
    -  make clean-test-env

triage:
  stage: triage
  needs: []
  variables:
    # This is the name of the pipeline being triaged. Must match the name of the pipeline in Gitlab.
    TRIAGE_PIPELINE_NAME: "Periodic unit test"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $TRIAGE_E2E == "true"
      when: always
  image: registry.gitlab.com/gitlab-ci-utils/curl-jq:2.0.0
  script:
    - ./hack/scripts/periodic_test_triage.sh