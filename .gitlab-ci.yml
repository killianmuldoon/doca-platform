image: golang:1.22

default:
  interruptible: true

workflow:
  # This variable can be defined where the job is triggered. e.g. the pipeline schedule in the gitlab UI
  name: $CI_PIPELINE_NAME
  auto_cancel:
    on_new_commit: interruptible
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      auto_cancel:
        on_new_commit: none
    - when: always # Other pipelines can run, but use the default parameters

variables:
  ## Enable timestamps in job logs. See https://docs.gitlab.com/ee/ci/yaml/ci_job_log_timestamps.html
  FF_TIMESTAMPS: true
  ## This is a read-only token used for pulling repositories. Defined in the DPF operator CI/CD settings.
  GITLAB_TOKEN: $CI_TOKEN
  ## This is a read only token for reading from the Gitlab API. Used for triage and slack notification scripts.
  GITLAB_API_TOKEN: $API_READ_TOKEN
  ## This is a token for pulling from the Gitlab image registry. Should be overwritten if using any other registry.
  IMAGE_PULL_KEY: $GITLAB_REGISTRY_TOKEN
  ARTIFACTS: $CI_PROJECT_DIR/artifacts
  REGISTRY: gitlab-master.nvidia.com:5005/doca-platform-foundation/doca-platform-foundation/e2e
  TAG: v0.1.0-$CI_COMMIT_SHORT_SHA-test
  GOPATH: $CI_PROJECT_DIR/.gocache

stages:
  - verify
  - build
  - test
  - triage

lint:
  stage: verify
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  variables:
    GOLANGCI_LINT_CACHE: $CI_PROJECT_DIR/.golangci-cache
    # TODO: Remove this one when bug upstream is fixed. golangci-lint should not rely on GOCACHE and instead use
    # GOLANGCI_LINT_CACHE for all of its caching.
    GOCACHE: $CI_PROJECT_DIR/.gocache/go-build # avoid rebuilding all the artifacts golangci-lint requires
  cache:
    key: lint
    untracked: true
    when: always
    paths:
      - hack/tools/bin
      - .gocache
      - .golangci-cache
  before_script:
    # Create the directory which is used to cache golangci-lint results.
    # Added to .gitignore.
    - mkdir -p .golangci-cache
    # Create the directory which will be used as the gocache.
    # Added to .gitignore.
    # Required by golangci-lint to cache go mods
    - mkdir -p .gocache
  script:
    - make lint
    - make lint-helm

verify:
  stage: verify
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  variables:
    BASE_REV: $CI_MERGE_REQUEST_DIFF_BASE_SHA # Used by the verify-copyright target
    COMPARISON_REV: $CI_COMMIT_SHA # Used by the verify-copyright target
    REGISTRY: example.com
    TAG: v0.1.0
  cache:
    key: verify
    untracked: true
    when: always
    paths:
      - hack/tools/bin
      - hack/repos
      - .gocache
  before_script:
    # Create the directory which will be used as the gocache.
    # Added to .gitignore.
    - mkdir -p .gocache
  script:
    -  make verify-generate verify-copyright
  after_script:
    - git diff

test:
  stage: test
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == "schedule" && $UNIT_TEST == "true"
  cache:
    key: test
    untracked: true
    when: always
    paths:
      - hack/tools/bin
      - .gocache
  artifacts:
    when: always
    paths:
      - junit.xml
    reports:
      junit: junit.xml
  before_script:
    # Create the directory which will be used as the gocache.
    # Added to .gitignore.
    - mkdir -p .gocache
  script:
    - make test-report

e2e:
  stage: test
  needs: [ ]
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == "schedule" && $E2E_TEST == "true"
  variables:
    # Flannel chosen here as it is not hosted on docker hub helping avoid rate limits.
    MINIKUBE_CNI: flannel
    MINIKUBE_DRIVER: docker
  tags:
    - e2e
  cache:
    key: e2e
    untracked: true
    when: always
    paths:
      - hack/tools/bin
      - hack/repos
  artifacts:
    when: always
    paths:
      - artifacts/*
  before_script:
    - ./hack/scripts/ci_helm_docker_login.sh
    # artifacts are not correctly delete when gitlab restarts jobs.
    - rm -rf artifacts
    # empty the minikube image cache
    - rm -rf  ~/.minikube/cache/images/*
    - rm -f ~/.minikube/config/config.json
    - make clean-test-env generate test-release-e2e-quick test-env-e2e
  script:
    - make test-deploy-operator-helm
    - make test-e2e
  after_script:
    - ./hack/scripts/slack-notification.sh
    - make clean-test-env

e2e-dpf-standalone:
  stage: test
  needs: [release]
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      allow_failure: true
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "schedule" && $E2E_TEST_FULL == "true"
      when: always
  variables:
    # The helm bundles and operator-sdk require a remote repository in the e2e environment.
    ANSIBLE_PASSWORD: $TMP_ANSIBLE_PASSWORD
    DPF_E2E_NUM_DPU_NODES: 1
    PIPELINE_NAME: "Periodic e2e dpf-standalone tests"
  tags:
    - dpf/dpu
  cache:
    key: e2e
    untracked: true
    when: always
    paths:
      - hack/tools/bin
      - hack/repos
  artifacts:
    when: always
    paths:
      - artifacts/*
  before_script:
    # artifacts are not correctly delete when gitlab restarts jobs.
    - rm -rf artifacts
    - ./hack/scripts/ci_helm_docker_login.sh
    - docker run --rm --net=host nvcr.io/nvstaging/mellanox/dpf-standalone:latest -e ansible_password=$ANSIBLE_PASSWORD -u root reset.yml
    - make test-env-dpf-standalone
    - ./hack/scripts/create-artefact-secrets.sh
  script:
    - make generate
    - make test-deploy-operator-helm
    - make test-e2e
  after_script:
    - ./hack/scripts/slack-notification.sh
    - docker run --rm --net=host nvcr.io/nvstaging/mellanox/dpf-standalone:latest -e ansible_password=$ANSIBLE_PASSWORD -u root reset.yml

release:
  interruptible: false
  stage: build
  # We have a known issue in the OVS CNI build that can lead to the build getting stuck. Retry helps improve the
  # probability of having a successful nightly release. Even if the known issue is fixed, we should keep that retry for
  # transient errors (e.g. network).
  retry: 2
  needs: [push-release-artifacts]
  rules:
    - if: $CI_PIPELINE_SOURCE == 'push' && $CI_COMMIT_BRANCH == "main"
      when: always
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: on_success
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "schedule" && $NIGHTLY_RELEASE == "true"
      when: always
  variables:
    PIPELINE_NAME: "release"
    OPERATOR_CHART_TAGS: "$TAG v0.1.0-latest"
  tags:
    - release
  script:
    - ./hack/scripts/ci_helm_docker_login.sh
    - timeout 30m make release
  after_script:
    - ./hack/scripts/slack-notification.sh

# This job syncs release artifacts from a shared folder internally to the gitlab artifact repo.
push-release-artifacts:
  interruptible: false
  stage: build
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == 'push' && $CI_COMMIT_BRANCH == "main"
      when: always
    - if: $CI_PIPELINE_SOURCE == "schedule" && $NIGHTLY_RELEASE == "true"
      when: always
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: manual
      allow_failure: true
  tags:
    - release
    - lab/mellanox
  script:
    - ./hack/scripts/mirror-packages-to-gitlab.sh
  after_script:
    - ./hack/scripts/slack-notification.sh

triage:
  interruptible: false
  stage: triage
  needs: []
  variables:
    # This is the name of the pipeline being triaged. Must match the name of the pipeline in Gitlab.
    TRIAGE_PIPELINE_NAME: "Periodic unit test"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $TRIAGE_E2E == "true"
      when: always
  image: registry.gitlab.com/gitlab-ci-utils/curl-jq:2.0.0
  script:
    - ./hack/scripts/periodic_test_triage.sh
