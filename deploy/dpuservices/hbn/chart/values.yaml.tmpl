## Note: Most of this values file is documentation only. These fields should be set by the user in the DPUService.
# Sets image details for docaHBN container.
docaHbn:
  image:
    repository: ${HBN_IMAGE}
    tag: ${TAG}
  imagePullPolicy: IfNotPresent

# Sets image details for docaInit container.
hbnInit:
  image:
    repository: ${HBN_IMAGE}
    tag: ${TAG}
  imagePullPolicy: IfNotPresent

# The following config should be set by the user in the DPUService.
#
## 1) Sets sfc.nvidia.com/service label on the DaemonSet and pod template. Can be set in DPUService `.spec.serviceID`
#serviceID: hbn # reconciled to sfc.nvidia.com/service label on the DaemonSet and pod template.
#
#serviceDaemonSet:
### 2) Selects nodes on which this service will run by label. Can be set in DPUService `.spec.serviceDaemonSet.nodeSelector`
#  nodeSelector:
#    nodeSelectorTerms:
#      - matchExpressions:
#          - key: dpu
#            operator: In
#            values:
#              - dpu
#
## 3) Resources required by the main HBN container. Set to both requests and limits Can be set in DPUService `.spec.serviceDaemonSet.resources`.
#  resources:
#    memory: 6Gi
#    nvidia.com/gen_sf: 1
#    nvidia.com/p0_sf: 1
#    nvidia.com/p1_sf: 1
#
## 4) Sets labels on the DaemonSet and pod template. Can be set in DPUService `.spec.serviceDaemonSet.labels`
#  labels: # reconciled to labels on the DaemonSet and pod template
#    dfp.nvidia.com/dpuservice: hbn
#
## 5) Sets annotations on the DaemonSet and pod template. Can be set in DPUService `.spec.serviceDaemonSet.annotations`
#  annotations:  # reconciled to annotations on the DaemonSet and pod template
#    dfp.nvidia.com/dpuservice: hbn
#    k8s.v1.cni.cncf.io/networks: "'[
#    {\"name\" : \"uplink-p0\", \"interface\" : \"p0_sf\"},
#    {\"name\" : \"uplink-p1\", \"interface\" : \"p1_sf\"},
#    {\"name\" : \"host\", \"interface\" : \"pf0hpf_sf\"}]'"
#
## 6) Sets updateStrategy on the DaemonSet. Can be set in DPUService `.spec.serviceDaemonSet.updateStrategy.`
#  updateStrategy:
#    type: RollingUpdate
#    rollingUpdate:
#      maxUnavailable: 1
#
## 7) Startup template for HBN pod. Can be set in DPUService `.spec.values.hbnNodesConf.hbnNodesConfigJson`
#hbnNodesConf:
#  hbnNodesConfigJson: |-
#    {
#      "host1": {
#        "lo_ip": "10.10.10.1/32",
#        "lo_ipv6": "2010:10:10::1/128",
#        "vlan_ip": "30.30.30.1/24",
#        "vlan_ipv6": "2030:30:30::1/64",
#        "vlan_id": "101",
#        "bgp_autonomous_system": "65501",
#        "bgp_router_id": "10.10.10.1"
#      },
#      "clx-host-068-dpu.maas": {
#        "lo_ip": "10.10.10.2/32",
#        "lo_ipv6": "2010:10:10::2/128",
#        "vlan_ip": "30.30.30.2/24",
#        "vlan_ipv6": "2030:30:30::2/64",
#        "vlan_id": "102",
#        "bgp_autonomous_system": "65502",
#        "bgp_router_id": "10.10.10.2"
#      },
#      "host3": {
#        "lo_ip": "10.10.10.3/32",
#        "lo_ipv6": "2010:10:10::3/128",
#        "vlan_ip": "30.30.30.3/24",
#        "vlan_ipv6": "2030:30:30::3/64",
#        "vlan_id": "103",
#        "bgp_autonomous_system": "65503",
#        "bgp_router_id": "10.10.10.3"
#      }
#    }
#
## 8) Startup template for HBN pod. Can be set in DPUService `.spec.values.j2StartupTemplate.startupYamlJ2`
#j2StartupTemplate:
#  startupYamlJ2: |-
#    - header:
#        model: BLUEFIELD
#        nvue-api-version: nvue_v1
#        rev-id: 1.0
#        version: HBN 2.1.0
#    - set:
#        bridge:
#          domain:
#            br_default:
#              vlan:
#                '{{ config.vlan_id }}': {}
#        interface:
#          lo:
#            ip:
#              address:
#                {{ config.lo_ip }}: {}
#                {{ config.lo_ipv6 }}: {}
#            type: loopback
#          p0_sf:
#            type: swp
#          vlan{{ config.vlan_id }}:
#            base-interface: br_default
#            ip:
#              address:
#                {{ config.vlan_ip }}: {}
#                {{ config.vlan_ipv6 }}: {}
#            type: svi
#            vlan: {{ config.vlan_id }}
#        router:
#          bgp:
#            enable: on
#        vrf:
#          default:
#            router:
#              bgp:
#                address-family:
#                  ipv4-unicast:
#                    enable: on
#                    redistribute:
#                      connected:
#                        enable: on
#                  ipv6-unicast:
#                    enable: on
#                    redistribute:
#                      connected:
#                        enable: on
#                autonomous-system: {{ config.bgp_autonomous_system }}
#                enable: on
#                neighbor:
#                  p0_sf:
#                    address-family:
#                      ipv4-unicast:
#                        enable: on
#                      ipv6-unicast:
#                        enable: on
#                    remote-as: external
#                    type: unnumbered
#                path-selection:
#                  multipath:
#                    aspath-ignore: on
#                router-id: {{ config.bgp_router_id }}
#kubernetesClusterDomain: cluster.local