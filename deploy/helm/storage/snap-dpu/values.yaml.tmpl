### DPF contract ###

# configuration for the service
serviceDaemonSet:
  # selects nodes on which this service will run by label. Can be set in DPUService `.spec.serviceDaemonSet.nodeSelector`
  # nodeSelector:
  #   nodeSelectorTerms:
  #   - matchExpressions:
  #       - key: dpu
  #         operator: In
  #         values:
  #           - dpu
  # labels on the DaemonSet and pod template. Can be set in DPUService `.spec.serviceDaemonSet.labels`
  labels: {}
  # annotations on the DaemonSet and pod template. Can be set in DPUService `.spec.serviceDaemonSet.annotations`
  annotations: {}
  # updateStrategy on the DaemonSet. Can be set in DPUService `.spec.serviceDaemonSet.updateStrategy.`
  updateStrategy: {}
  #  type: RollingUpdate
  #  rollingUpdate:
  #    maxUnavailable: 1


tolerations: []
imagePullSecrets: []

#==============================================================================
# doca-snap (DaemonSet) configuration
#==============================================================================
docaSnap:
  # -- DaemonSet name used in metadata. 
  name: "doca-snap"

  # -- Container image
  image:
    repository: nvcr.io/nvstaging/doca/doca_snap
    tag: 4.5.0-6-doca2.9.0
  # -- Image pull secrets (if pulling from a private registry)
  imagePullSecrets: []

  # -- Restart policy for the DaemonSet pods
  restartPolicy: "Always"

  hostNetwork: false

  pullPolicy: IfNotPresent

  # -- Security context for the container
  securityContext:
    privileged: true
    capabilities:
      add:
        - "IPC_LOCK"
        - "SYS_RAWIO"
        - "SYS_NICE"

  # -- Resource requests and limits
  resources:
    requests:
      memory: "2Gi"
      hugepages-2Mi: "4Gi"
      cpu: "8"
    limits:
      memory: "4Gi"
      hugepages-2Mi: "4Gi"
      cpu: "16"

  # -- Environment variables
  env:
    SPDK_XLIO_PATH: "" # e.g., "/usr/lib/libxlio.so" to enable XLIO
    APP_ARGS: ""       # e.g., "--wait-for-rpc"
    SPDK_RPC_INIT_CONF_JSON: ""  # e.g., "/etc/nvda_snap/config.json"
    SPDK_RPC_INIT_CONF: ""       # e.g., "/etc/nvda_snap/spdk_rpc_init.conf"
    SNAP_RPC_INIT_CONF: ""       # e.g., "/etc/nvda_snap/snap_rpc_init.conf"
    # TODO: uncomment when fixed
    # SNAP_SPDK_SOCK: "/var/tmp/snap.sock"


#==============================================================================
# snap-node-driver (DaemonSet) configuration
#==============================================================================
snapNodeDriver:
  labels: {}
  annotations: {}
  image:
    repository: ${STORAGE_SNAP_NODE_DRIVER_IMAGE}
    # if not set the .Chart.AppVersion is used
    tag: ${TAG}
  pullPolicy: IfNotPresent
  imagePullSecrets: []
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 50m
      memory: 128Mi
  securityContext:
    runAsUser: 0
  env: []
  # example:
  #  - name: SOME_DRIVER_ENV
  #    value: "someValue"


#==============================================================================
# storage-vendor-dpu-plugin (DaemonSet) configuration
#==============================================================================
storagePlugin:
  labels: {}
  annotations: {}
  image:
    repository: ${STORAGE_VENDOR_DPU_PLUGIN_IMAGE}
    # if not set the .Chart.AppVersion is used
    tag: ${TAG}
  pullPolicy: IfNotPresent
  imagePullSecrets: []
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 50m
      memory: 128Mi
  securityContext:
    runAsUser: 0
  env: []
  # example:
  #   - name: GRPC_SOCKET_PATH
  #     value: "/var/run/dpu-plugin.sock"

#==============================================================================
# RBAC roles for clients from host cluster
#==============================================================================

rbacRoles:
  snapCsiPlugin:
    create: true
    serviceAccount: snap-csi-plugin-sa
  snapController:
    create: true
    serviceAccount: snap-controller-sa

#==============================================================================
# Configuration for the storage policies and vendors
#==============================================================================

configuration:
  storageVendors: []
    # - name: nvidia
    #   namespace: nvidia-storage
    #   storageClassName: spdkcsi-sc
    #   pluginName: nvidia
  storagePolicies: []
    # - name: policy1
    #   namespace: nvidia-storage
    #   storageVendors: ["nvidia"]
    #   storageSelectionAlg: "Random"
