//go:build !ignore_autogenerated

/*
Copyright 2024 NVIDIA.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: nvidia/storage/plugins/v1/storage_plugin.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AccessMode specifies how a volume can be accessed.
type AccessMode int32

const (
	// ACCESS_MODE_UNSPECIFIED indicates an unspecified access mode.
	AccessMode_ACCESS_MODE_UNSPECIFIED AccessMode = 0
	// ACCESS_MODE_RWO indicates read/write on a single node.
	AccessMode_ACCESS_MODE_RWO AccessMode = 1
	// ACCESS_MODE_ROX indicates read-only on multiple nodes.
	AccessMode_ACCESS_MODE_ROX AccessMode = 2
	// ACCESS_MODE_RWX indicates read/write on multiple nodes.
	AccessMode_ACCESS_MODE_RWX AccessMode = 3
	// ACCESS_MODE_RWOP indicates read/write on a single pod.
	AccessMode_ACCESS_MODE_RWOP AccessMode = 4
)

// Enum value maps for AccessMode.
var (
	AccessMode_name = map[int32]string{
		0: "ACCESS_MODE_UNSPECIFIED",
		1: "ACCESS_MODE_RWO",
		2: "ACCESS_MODE_ROX",
		3: "ACCESS_MODE_RWX",
		4: "ACCESS_MODE_RWOP",
	}
	AccessMode_value = map[string]int32{
		"ACCESS_MODE_UNSPECIFIED": 0,
		"ACCESS_MODE_RWO":         1,
		"ACCESS_MODE_ROX":         2,
		"ACCESS_MODE_RWX":         3,
		"ACCESS_MODE_RWOP":        4,
	}
)

func (x AccessMode) Enum() *AccessMode {
	p := new(AccessMode)
	*p = x
	return p
}

func (x AccessMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessMode) Descriptor() protoreflect.EnumDescriptor {
	return file_nvidia_storage_plugins_v1_storage_plugin_proto_enumTypes[0].Descriptor()
}

func (AccessMode) Type() protoreflect.EnumType {
	return &file_nvidia_storage_plugins_v1_storage_plugin_proto_enumTypes[0]
}

func (x AccessMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessMode.Descriptor instead.
func (AccessMode) EnumDescriptor() ([]byte, []int) {
	return file_nvidia_storage_plugins_v1_storage_plugin_proto_rawDescGZIP(), []int{0}
}

// Type defines the specific capability.
type StoragePluginServiceCapability_RPC_Type int32

const (
	// UNSPECIFIED indicates an undefined capability.
	StoragePluginServiceCapability_RPC_TYPE_UNSPECIFIED StoragePluginServiceCapability_RPC_Type = 0
	// CREATE_DELETE_BLOCK_DEVICE indicates support for block device creation and deletion.
	StoragePluginServiceCapability_RPC_TYPE_CREATE_DELETE_BLOCK_DEVICE StoragePluginServiceCapability_RPC_Type = 1
	// CREATE_DELETE_FS_DEVICE indicates support for filesystem device creation and deletion.
	StoragePluginServiceCapability_RPC_TYPE_CREATE_DELETE_FS_DEVICE StoragePluginServiceCapability_RPC_Type = 2
	// GET_DEVICE_STATS indicates support for retrieving device statistics.
	StoragePluginServiceCapability_RPC_TYPE_GET_DEVICE_STATS StoragePluginServiceCapability_RPC_Type = 3
	// LIST_DEVICES indicates support for listing devices.
	StoragePluginServiceCapability_RPC_TYPE_LIST_DEVICES StoragePluginServiceCapability_RPC_Type = 4
)

// Enum value maps for StoragePluginServiceCapability_RPC_Type.
var (
	StoragePluginServiceCapability_RPC_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_CREATE_DELETE_BLOCK_DEVICE",
		2: "TYPE_CREATE_DELETE_FS_DEVICE",
		3: "TYPE_GET_DEVICE_STATS",
		4: "TYPE_LIST_DEVICES",
	}
	StoragePluginServiceCapability_RPC_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":                0,
		"TYPE_CREATE_DELETE_BLOCK_DEVICE": 1,
		"TYPE_CREATE_DELETE_FS_DEVICE":    2,
		"TYPE_GET_DEVICE_STATS":           3,
		"TYPE_LIST_DEVICES":               4,
	}
)

func (x StoragePluginServiceCapability_RPC_Type) Enum() *StoragePluginServiceCapability_RPC_Type {
	p := new(StoragePluginServiceCapability_RPC_Type)
	*p = x
	return p
}

func (x StoragePluginServiceCapability_RPC_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StoragePluginServiceCapability_RPC_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_nvidia_storage_plugins_v1_storage_plugin_proto_enumTypes[1].Descriptor()
}

func (StoragePluginServiceCapability_RPC_Type) Type() protoreflect.EnumType {
	return &file_nvidia_storage_plugins_v1_storage_plugin_proto_enumTypes[1]
}

func (x StoragePluginServiceCapability_RPC_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StoragePluginServiceCapability_RPC_Type.Descriptor instead.
func (StoragePluginServiceCapability_RPC_Type) EnumDescriptor() ([]byte, []int) {
	return file_nvidia_storage_plugins_v1_storage_plugin_proto_rawDescGZIP(), []int{6, 0, 0}
}

// GetPluginInfoRequest is used to request the plugin's information.
type GetPluginInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPluginInfoRequest) Reset() {
	*x = GetPluginInfoRequest{}
	mi := &file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPluginInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPluginInfoRequest) ProtoMessage() {}

func (x *GetPluginInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPluginInfoRequest.ProtoReflect.Descriptor instead.
func (*GetPluginInfoRequest) Descriptor() ([]byte, []int) {
	return file_nvidia_storage_plugins_v1_storage_plugin_proto_rawDescGZIP(), []int{0}
}

// GetPluginInfoResponse provides the plugin's name, version, and manifest details.
type GetPluginInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the plugin. It must follow domain name notation format
	// (https://tools.ietf.org/html/rfc1035#section-2.3.1) and must be 63 characters
	// or less. This field is required.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The version of the plugin. This field is required.
	VendorVersion string `protobuf:"bytes,2,opt,name=vendor_version,json=vendorVersion,proto3" json:"vendor_version,omitempty"`
	// The manifest provides additional opaque information about the plugin.
	// This field is required.
	Manifest map[string]string `protobuf:"bytes,3,rep,name=manifest,proto3" json:"manifest,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetPluginInfoResponse) Reset() {
	*x = GetPluginInfoResponse{}
	mi := &file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPluginInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPluginInfoResponse) ProtoMessage() {}

func (x *GetPluginInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPluginInfoResponse.ProtoReflect.Descriptor instead.
func (*GetPluginInfoResponse) Descriptor() ([]byte, []int) {
	return file_nvidia_storage_plugins_v1_storage_plugin_proto_rawDescGZIP(), []int{1}
}

func (x *GetPluginInfoResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetPluginInfoResponse) GetVendorVersion() string {
	if x != nil {
		return x.VendorVersion
	}
	return ""
}

func (x *GetPluginInfoResponse) GetManifest() map[string]string {
	if x != nil {
		return x.Manifest
	}
	return nil
}

// ProbeRequest is used to check the plugin's health and readiness.
type ProbeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProbeRequest) Reset() {
	*x = ProbeRequest{}
	mi := &file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProbeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeRequest) ProtoMessage() {}

func (x *ProbeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeRequest.ProtoReflect.Descriptor instead.
func (*ProbeRequest) Descriptor() ([]byte, []int) {
	return file_nvidia_storage_plugins_v1_storage_plugin_proto_rawDescGZIP(), []int{2}
}

// ProbeResponse indicates the plugin's health and readiness status.
type ProbeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ready indicates whether the plugin is healthy and ready.
	Ready *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=ready,proto3" json:"ready,omitempty"`
}

func (x *ProbeResponse) Reset() {
	*x = ProbeResponse{}
	mi := &file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProbeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeResponse) ProtoMessage() {}

func (x *ProbeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeResponse.ProtoReflect.Descriptor instead.
func (*ProbeResponse) Descriptor() ([]byte, []int) {
	return file_nvidia_storage_plugins_v1_storage_plugin_proto_rawDescGZIP(), []int{3}
}

func (x *ProbeResponse) GetReady() *wrapperspb.BoolValue {
	if x != nil {
		return x.Ready
	}
	return nil
}

// StoragePluginGetCapabilitiesRequest is used to request the plugin's capabilities.
type StoragePluginGetCapabilitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StoragePluginGetCapabilitiesRequest) Reset() {
	*x = StoragePluginGetCapabilitiesRequest{}
	mi := &file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoragePluginGetCapabilitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoragePluginGetCapabilitiesRequest) ProtoMessage() {}

func (x *StoragePluginGetCapabilitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoragePluginGetCapabilitiesRequest.ProtoReflect.Descriptor instead.
func (*StoragePluginGetCapabilitiesRequest) Descriptor() ([]byte, []int) {
	return file_nvidia_storage_plugins_v1_storage_plugin_proto_rawDescGZIP(), []int{4}
}

// StoragePluginGetCapabilitiesResponse provides the list of supported capabilities.
type StoragePluginGetCapabilitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Capabilities supported by the plugin.
	Capabilities []*StoragePluginServiceCapability `protobuf:"bytes,1,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
}

func (x *StoragePluginGetCapabilitiesResponse) Reset() {
	*x = StoragePluginGetCapabilitiesResponse{}
	mi := &file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoragePluginGetCapabilitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoragePluginGetCapabilitiesResponse) ProtoMessage() {}

func (x *StoragePluginGetCapabilitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoragePluginGetCapabilitiesResponse.ProtoReflect.Descriptor instead.
func (*StoragePluginGetCapabilitiesResponse) Descriptor() ([]byte, []int) {
	return file_nvidia_storage_plugins_v1_storage_plugin_proto_rawDescGZIP(), []int{5}
}

func (x *StoragePluginGetCapabilitiesResponse) GetCapabilities() []*StoragePluginServiceCapability {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

// StoragePluginServiceCapability describes a capability of the storage plugin service.
type StoragePluginServiceCapability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The specific type of capability.
	//
	// Types that are assignable to Type:
	//
	//	*StoragePluginServiceCapability_Rpc
	Type isStoragePluginServiceCapability_Type `protobuf_oneof:"type"`
}

func (x *StoragePluginServiceCapability) Reset() {
	*x = StoragePluginServiceCapability{}
	mi := &file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoragePluginServiceCapability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoragePluginServiceCapability) ProtoMessage() {}

func (x *StoragePluginServiceCapability) ProtoReflect() protoreflect.Message {
	mi := &file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoragePluginServiceCapability.ProtoReflect.Descriptor instead.
func (*StoragePluginServiceCapability) Descriptor() ([]byte, []int) {
	return file_nvidia_storage_plugins_v1_storage_plugin_proto_rawDescGZIP(), []int{6}
}

func (m *StoragePluginServiceCapability) GetType() isStoragePluginServiceCapability_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *StoragePluginServiceCapability) GetRpc() *StoragePluginServiceCapability_RPC {
	if x, ok := x.GetType().(*StoragePluginServiceCapability_Rpc); ok {
		return x.Rpc
	}
	return nil
}

type isStoragePluginServiceCapability_Type interface {
	isStoragePluginServiceCapability_Type()
}

type StoragePluginServiceCapability_Rpc struct {
	// Specifies the RPC capabilities of the service.
	Rpc *StoragePluginServiceCapability_RPC `protobuf:"bytes,1,opt,name=rpc,proto3,oneof"`
}

func (*StoragePluginServiceCapability_Rpc) isStoragePluginServiceCapability_Type() {}

// GetSNAPProviderRequest is used to retrieve the SNAP provider's name.
type GetSNAPProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSNAPProviderRequest) Reset() {
	*x = GetSNAPProviderRequest{}
	mi := &file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSNAPProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSNAPProviderRequest) ProtoMessage() {}

func (x *GetSNAPProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSNAPProviderRequest.ProtoReflect.Descriptor instead.
func (*GetSNAPProviderRequest) Descriptor() ([]byte, []int) {
	return file_nvidia_storage_plugins_v1_storage_plugin_proto_rawDescGZIP(), []int{7}
}

// GetSNAPProviderResponse provides the SNAP provider's name.
type GetSNAPProviderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the SNAP provider. If this field is empty, the default provider
	// (e.g., NVIDIA) is used. This field is optional.
	ProviderName string `protobuf:"bytes,1,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
}

func (x *GetSNAPProviderResponse) Reset() {
	*x = GetSNAPProviderResponse{}
	mi := &file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSNAPProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSNAPProviderResponse) ProtoMessage() {}

func (x *GetSNAPProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSNAPProviderResponse.ProtoReflect.Descriptor instead.
func (*GetSNAPProviderResponse) Descriptor() ([]byte, []int) {
	return file_nvidia_storage_plugins_v1_storage_plugin_proto_rawDescGZIP(), []int{8}
}

func (x *GetSNAPProviderResponse) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

// CreateDeviceRequest is used to create a new storage device.
type CreateDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier for the volume.
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// The access modes for the volume.
	AccessModes []AccessMode `protobuf:"varint,2,rep,packed,name=access_modes,json=accessModes,proto3,enum=nvidia.storage.plugins.v1.AccessMode" json:"access_modes,omitempty"`
	// The volume mode, either Filesystem or Block. Default is Filesystem.
	VolumeMode string `protobuf:"bytes,3,opt,name=volume_mode,json=volumeMode,proto3" json:"volume_mode,omitempty"`
	// Static properties of the volume. This field is optional.
	PublishContext map[string]string `protobuf:"bytes,4,rep,name=publish_context,json=publishContext,proto3" json:"publish_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Static properties of the volume. This field is optional.
	VolumeContext map[string]string `protobuf:"bytes,5,rep,name=volume_context,json=volumeContext,proto3" json:"volume_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Static properties of the storage class. This field is optional.
	StorageParameters map[string]string `protobuf:"bytes,6,rep,name=storage_parameters,json=storageParameters,proto3" json:"storage_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateDeviceRequest) Reset() {
	*x = CreateDeviceRequest{}
	mi := &file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceRequest) ProtoMessage() {}

func (x *CreateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_nvidia_storage_plugins_v1_storage_plugin_proto_rawDescGZIP(), []int{9}
}

func (x *CreateDeviceRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *CreateDeviceRequest) GetAccessModes() []AccessMode {
	if x != nil {
		return x.AccessModes
	}
	return nil
}

func (x *CreateDeviceRequest) GetVolumeMode() string {
	if x != nil {
		return x.VolumeMode
	}
	return ""
}

func (x *CreateDeviceRequest) GetPublishContext() map[string]string {
	if x != nil {
		return x.PublishContext
	}
	return nil
}

func (x *CreateDeviceRequest) GetVolumeContext() map[string]string {
	if x != nil {
		return x.VolumeContext
	}
	return nil
}

func (x *CreateDeviceRequest) GetStorageParameters() map[string]string {
	if x != nil {
		return x.StorageParameters
	}
	return nil
}

// CreateDeviceResponse provides the details of the created device.
type CreateDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the created device (e.g., SPDK FSdev/Bdev name).
	DeviceName string `protobuf:"bytes,1,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
}

func (x *CreateDeviceResponse) Reset() {
	*x = CreateDeviceResponse{}
	mi := &file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceResponse) ProtoMessage() {}

func (x *CreateDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceResponse.ProtoReflect.Descriptor instead.
func (*CreateDeviceResponse) Descriptor() ([]byte, []int) {
	return file_nvidia_storage_plugins_v1_storage_plugin_proto_rawDescGZIP(), []int{10}
}

func (x *CreateDeviceResponse) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

// DeleteDeviceRequest is used to delete a storage device.
type DeleteDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier for the volume.
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// The name of the device to be deleted.
	DeviceName string `protobuf:"bytes,2,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
}

func (x *DeleteDeviceRequest) Reset() {
	*x = DeleteDeviceRequest{}
	mi := &file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceRequest) ProtoMessage() {}

func (x *DeleteDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeviceRequest) Descriptor() ([]byte, []int) {
	return file_nvidia_storage_plugins_v1_storage_plugin_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteDeviceRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *DeleteDeviceRequest) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

// DeleteDeviceResponse is the response for deleting a device.
type DeleteDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDeviceResponse) Reset() {
	*x = DeleteDeviceResponse{}
	mi := &file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceResponse) ProtoMessage() {}

func (x *DeleteDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceResponse.ProtoReflect.Descriptor instead.
func (*DeleteDeviceResponse) Descriptor() ([]byte, []int) {
	return file_nvidia_storage_plugins_v1_storage_plugin_proto_rawDescGZIP(), []int{12}
}

// RPC specifies an RPC capability type.
type StoragePluginServiceCapability_RPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the capability.
	Type StoragePluginServiceCapability_RPC_Type `protobuf:"varint,1,opt,name=type,proto3,enum=nvidia.storage.plugins.v1.StoragePluginServiceCapability_RPC_Type" json:"type,omitempty"`
}

func (x *StoragePluginServiceCapability_RPC) Reset() {
	*x = StoragePluginServiceCapability_RPC{}
	mi := &file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoragePluginServiceCapability_RPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoragePluginServiceCapability_RPC) ProtoMessage() {}

func (x *StoragePluginServiceCapability_RPC) ProtoReflect() protoreflect.Message {
	mi := &file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoragePluginServiceCapability_RPC.ProtoReflect.Descriptor instead.
func (*StoragePluginServiceCapability_RPC) Descriptor() ([]byte, []int) {
	return file_nvidia_storage_plugins_v1_storage_plugin_proto_rawDescGZIP(), []int{6, 0}
}

func (x *StoragePluginServiceCapability_RPC) GetType() StoragePluginServiceCapability_RPC_Type {
	if x != nil {
		return x.Type
	}
	return StoragePluginServiceCapability_RPC_TYPE_UNSPECIFIED
}

var File_nvidia_storage_plugins_v1_storage_plugin_proto protoreflect.FileDescriptor

var file_nvidia_storage_plugins_v1_storage_plugin_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x19, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x16, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xeb, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6e, 0x76, 0x69,
	0x64, 0x69, 0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x0e, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x41, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x22, 0x25, 0x0a, 0x23, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x24,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6e, 0x76, 0x69,
	0x64, 0x69, 0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x22, 0xf3, 0x02, 0x0a, 0x1e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x03, 0x72, 0x70, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x52,
	0x50, 0x43, 0x48, 0x00, 0x52, 0x03, 0x72, 0x70, 0x63, 0x1a, 0xf5, 0x01, 0x0a, 0x03, 0x52, 0x50,
	0x43, 0x12, 0x56, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x42, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x50, 0x43, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a,
	0x1c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x5f, 0x46, 0x53, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x53, 0x10,
	0x04, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x53, 0x4e, 0x41, 0x50, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x3e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x4e, 0x41, 0x50, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xb5, 0x05, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x6b, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6e,
	0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x68, 0x0a, 0x0e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69,
	0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x74, 0x0a, 0x12, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x1a, 0x41, 0x0a, 0x13, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x37, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2a, 0x7e, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x1b, 0x0a, 0x17, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x57, 0x4f, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x52, 0x4f, 0x58, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x57, 0x58, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x57, 0x4f, 0x50, 0x10,
	0x04, 0x32, 0xe1, 0x01, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x72, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x05, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0x12, 0x27, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6e, 0x76,
	0x69, 0x64, 0x69, 0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x94, 0x04, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9f,
	0x01, 0x0a, 0x1c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x3e, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3f, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x78, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x4e, 0x41, 0x50, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x31, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x4e, 0x41, 0x50, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x4e, 0x41, 0x50, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x0c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x2e, 0x6e, 0x76, 0x69,
	0x64, 0x69, 0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6e, 0x76, 0x69,
	0x64, 0x69, 0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x2e, 0x6e, 0x76,
	0x69, 0x64, 0x69, 0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6e, 0x76,
	0x69, 0x64, 0x69, 0x61, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nvidia_storage_plugins_v1_storage_plugin_proto_rawDescOnce sync.Once
	file_nvidia_storage_plugins_v1_storage_plugin_proto_rawDescData = file_nvidia_storage_plugins_v1_storage_plugin_proto_rawDesc
)

func file_nvidia_storage_plugins_v1_storage_plugin_proto_rawDescGZIP() []byte {
	file_nvidia_storage_plugins_v1_storage_plugin_proto_rawDescOnce.Do(func() {
		file_nvidia_storage_plugins_v1_storage_plugin_proto_rawDescData = protoimpl.X.CompressGZIP(file_nvidia_storage_plugins_v1_storage_plugin_proto_rawDescData)
	})
	return file_nvidia_storage_plugins_v1_storage_plugin_proto_rawDescData
}

var file_nvidia_storage_plugins_v1_storage_plugin_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_nvidia_storage_plugins_v1_storage_plugin_proto_goTypes = []any{
	(AccessMode)(0), // 0: nvidia.storage.plugins.v1.AccessMode
	(StoragePluginServiceCapability_RPC_Type)(0), // 1: nvidia.storage.plugins.v1.StoragePluginServiceCapability.RPC.Type
	(*GetPluginInfoRequest)(nil),                 // 2: nvidia.storage.plugins.v1.GetPluginInfoRequest
	(*GetPluginInfoResponse)(nil),                // 3: nvidia.storage.plugins.v1.GetPluginInfoResponse
	(*ProbeRequest)(nil),                         // 4: nvidia.storage.plugins.v1.ProbeRequest
	(*ProbeResponse)(nil),                        // 5: nvidia.storage.plugins.v1.ProbeResponse
	(*StoragePluginGetCapabilitiesRequest)(nil),  // 6: nvidia.storage.plugins.v1.StoragePluginGetCapabilitiesRequest
	(*StoragePluginGetCapabilitiesResponse)(nil), // 7: nvidia.storage.plugins.v1.StoragePluginGetCapabilitiesResponse
	(*StoragePluginServiceCapability)(nil),       // 8: nvidia.storage.plugins.v1.StoragePluginServiceCapability
	(*GetSNAPProviderRequest)(nil),               // 9: nvidia.storage.plugins.v1.GetSNAPProviderRequest
	(*GetSNAPProviderResponse)(nil),              // 10: nvidia.storage.plugins.v1.GetSNAPProviderResponse
	(*CreateDeviceRequest)(nil),                  // 11: nvidia.storage.plugins.v1.CreateDeviceRequest
	(*CreateDeviceResponse)(nil),                 // 12: nvidia.storage.plugins.v1.CreateDeviceResponse
	(*DeleteDeviceRequest)(nil),                  // 13: nvidia.storage.plugins.v1.DeleteDeviceRequest
	(*DeleteDeviceResponse)(nil),                 // 14: nvidia.storage.plugins.v1.DeleteDeviceResponse
	nil,                                          // 15: nvidia.storage.plugins.v1.GetPluginInfoResponse.ManifestEntry
	(*StoragePluginServiceCapability_RPC)(nil),   // 16: nvidia.storage.plugins.v1.StoragePluginServiceCapability.RPC
	nil,                          // 17: nvidia.storage.plugins.v1.CreateDeviceRequest.PublishContextEntry
	nil,                          // 18: nvidia.storage.plugins.v1.CreateDeviceRequest.VolumeContextEntry
	nil,                          // 19: nvidia.storage.plugins.v1.CreateDeviceRequest.StorageParametersEntry
	(*wrapperspb.BoolValue)(nil), // 20: google.protobuf.BoolValue
}
var file_nvidia_storage_plugins_v1_storage_plugin_proto_depIdxs = []int32{
	15, // 0: nvidia.storage.plugins.v1.GetPluginInfoResponse.manifest:type_name -> nvidia.storage.plugins.v1.GetPluginInfoResponse.ManifestEntry
	20, // 1: nvidia.storage.plugins.v1.ProbeResponse.ready:type_name -> google.protobuf.BoolValue
	8,  // 2: nvidia.storage.plugins.v1.StoragePluginGetCapabilitiesResponse.capabilities:type_name -> nvidia.storage.plugins.v1.StoragePluginServiceCapability
	16, // 3: nvidia.storage.plugins.v1.StoragePluginServiceCapability.rpc:type_name -> nvidia.storage.plugins.v1.StoragePluginServiceCapability.RPC
	0,  // 4: nvidia.storage.plugins.v1.CreateDeviceRequest.access_modes:type_name -> nvidia.storage.plugins.v1.AccessMode
	17, // 5: nvidia.storage.plugins.v1.CreateDeviceRequest.publish_context:type_name -> nvidia.storage.plugins.v1.CreateDeviceRequest.PublishContextEntry
	18, // 6: nvidia.storage.plugins.v1.CreateDeviceRequest.volume_context:type_name -> nvidia.storage.plugins.v1.CreateDeviceRequest.VolumeContextEntry
	19, // 7: nvidia.storage.plugins.v1.CreateDeviceRequest.storage_parameters:type_name -> nvidia.storage.plugins.v1.CreateDeviceRequest.StorageParametersEntry
	1,  // 8: nvidia.storage.plugins.v1.StoragePluginServiceCapability.RPC.type:type_name -> nvidia.storage.plugins.v1.StoragePluginServiceCapability.RPC.Type
	2,  // 9: nvidia.storage.plugins.v1.IdentityService.GetPluginInfo:input_type -> nvidia.storage.plugins.v1.GetPluginInfoRequest
	4,  // 10: nvidia.storage.plugins.v1.IdentityService.Probe:input_type -> nvidia.storage.plugins.v1.ProbeRequest
	6,  // 11: nvidia.storage.plugins.v1.StoragePluginService.StoragePluginGetCapabilities:input_type -> nvidia.storage.plugins.v1.StoragePluginGetCapabilitiesRequest
	9,  // 12: nvidia.storage.plugins.v1.StoragePluginService.GetSNAPProvider:input_type -> nvidia.storage.plugins.v1.GetSNAPProviderRequest
	11, // 13: nvidia.storage.plugins.v1.StoragePluginService.CreateDevice:input_type -> nvidia.storage.plugins.v1.CreateDeviceRequest
	13, // 14: nvidia.storage.plugins.v1.StoragePluginService.DeleteDevice:input_type -> nvidia.storage.plugins.v1.DeleteDeviceRequest
	3,  // 15: nvidia.storage.plugins.v1.IdentityService.GetPluginInfo:output_type -> nvidia.storage.plugins.v1.GetPluginInfoResponse
	5,  // 16: nvidia.storage.plugins.v1.IdentityService.Probe:output_type -> nvidia.storage.plugins.v1.ProbeResponse
	7,  // 17: nvidia.storage.plugins.v1.StoragePluginService.StoragePluginGetCapabilities:output_type -> nvidia.storage.plugins.v1.StoragePluginGetCapabilitiesResponse
	10, // 18: nvidia.storage.plugins.v1.StoragePluginService.GetSNAPProvider:output_type -> nvidia.storage.plugins.v1.GetSNAPProviderResponse
	12, // 19: nvidia.storage.plugins.v1.StoragePluginService.CreateDevice:output_type -> nvidia.storage.plugins.v1.CreateDeviceResponse
	14, // 20: nvidia.storage.plugins.v1.StoragePluginService.DeleteDevice:output_type -> nvidia.storage.plugins.v1.DeleteDeviceResponse
	15, // [15:21] is the sub-list for method output_type
	9,  // [9:15] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_nvidia_storage_plugins_v1_storage_plugin_proto_init() }
func file_nvidia_storage_plugins_v1_storage_plugin_proto_init() {
	if File_nvidia_storage_plugins_v1_storage_plugin_proto != nil {
		return
	}
	file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes[6].OneofWrappers = []any{
		(*StoragePluginServiceCapability_Rpc)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nvidia_storage_plugins_v1_storage_plugin_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_nvidia_storage_plugins_v1_storage_plugin_proto_goTypes,
		DependencyIndexes: file_nvidia_storage_plugins_v1_storage_plugin_proto_depIdxs,
		EnumInfos:         file_nvidia_storage_plugins_v1_storage_plugin_proto_enumTypes,
		MessageInfos:      file_nvidia_storage_plugins_v1_storage_plugin_proto_msgTypes,
	}.Build()
	File_nvidia_storage_plugins_v1_storage_plugin_proto = out.File
	file_nvidia_storage_plugins_v1_storage_plugin_proto_rawDesc = nil
	file_nvidia_storage_plugins_v1_storage_plugin_proto_goTypes = nil
	file_nvidia_storage_plugins_v1_storage_plugin_proto_depIdxs = nil
}
