FROM docker.io/library/golang:1.22 AS builder

WORKDIR /workspace

# Copy the Go Modules manifests
COPY go.mod go.mod
COPY go.sum go.sum

# Cache deps before building and copying source so that we don't need to re-download as much
# and so that source changes don't invalidate our downloaded layer
RUN --mount=type=cache,target=/go/pkg/mod \
    go mod download

COPY ./ ./

# Ensure that no additional tools or artifacts are included.
RUN make clean

ARG gcflags
ARG ldflags
ARG TARGETARCH

ENV GO_LDFLAGS=\"${ldflags}\"
ENV GO_GCFLAGS=\"${gcflags}\"
ENV ARCH=${TARGETARCH}

RUN --mount=type=cache,target=/root/.cache/go-build \
    --mount=type=cache,target=/go/pkg/mod \
    make binary-detector

FROM nvcr.io/nvstaging/doca/doca:latest-2.9-full-rt-host

ARG TARGETARCH
ARG MFT_VERSION=4.29.0-131

RUN apt-get update -y && \
    apt-get install -y --no-install-recommends libusb-1.0-0 ipmitool rshim curl screen pv=1.6.6-1build2

RUN case ${TARGETARCH} in \
        amd64) ARCH=x86_64 ;; \
        arm64) ARCH=arm64 ;; \
        *) echo "Unsupported architecture: ${TARGETARCH}" && exit 1 ;; \
    esac && \
    curl -fsSL https://www.mellanox.com/downloads/MFT/mft-${MFT_VERSION}-${ARCH}-deb.tgz | tar -xz -C /tmp && \
    cd /tmp/mft-${MFT_VERSION}-${ARCH}-deb && \
    ./install.sh --without-kernel

RUN mkdir -p /bfb-folder

RUN echo "ipmitool chassis power $reboot" > /usr/sbin/reboot && chmod +x /usr/sbin/reboot

RUN echo "echo 'running rshim'; rshim" > rshim.sh && chmod +x rshim.sh

COPY ./internal/bf-slr/bf-slr.sh /usr/sbin
COPY --from=builder /workspace/bin/dpu-detector .